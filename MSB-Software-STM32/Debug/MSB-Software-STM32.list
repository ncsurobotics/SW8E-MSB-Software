
MSB-Software-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004240  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004330  08004330  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004330  08004330  00005330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004338  08004338  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004338  08004338  00005338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800433c  0800433c  0000533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004340  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  0800434c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800434c  000060c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b10c  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4f  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00012e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000967  00000000  00000000  00013ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014088  00000000  00000000  0001441f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f272  00000000  00000000  000284a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d484  00000000  00000000  00037719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4b9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  000b4be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b77e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042e8 	.word	0x080042e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080042e8 	.word	0x080042e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1824      	adds	r4, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	42a3      	cmp	r3, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c23      	lsrs	r3, r4, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0424      	lsls	r4, r4, #16
 8000482:	1960      	adds	r0, r4, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <setServo1Pos>:
/* Functions for changing the servo angles
 * Counter period is 7999
 * angle of 0 translates to CCR = 400 (1 ms high)
 * angle of 180 translates to CCR = 800 (2 ms high)
 */
void setServo1Pos(int angle) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = (angle/180) * 400 + 400;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	21b4      	movs	r1, #180	@ 0xb4
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff fdc7 	bl	800021c <__divsi3>
 800068e:	0003      	movs	r3, r0
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	0013      	movs	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	189b      	adds	r3, r3, r2
 8000698:	009a      	lsls	r2, r3, #2
 800069a:	189b      	adds	r3, r3, r2
 800069c:	011b      	lsls	r3, r3, #4
 800069e:	001a      	movs	r2, r3
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}

080006ae <setServo2Pos>:
void setServo2Pos(int angle) {
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	TIM2->CCR2 = (angle/180) * 400 + 400;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	21b4      	movs	r1, #180	@ 0xb4
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff fdae 	bl	800021c <__divsi3>
 80006c0:	0003      	movs	r3, r0
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	0013      	movs	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	189b      	adds	r3, r3, r2
 80006ca:	009a      	lsls	r2, r3, #2
 80006cc:	189b      	adds	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	001a      	movs	r2, r3
 80006d2:	2380      	movs	r3, #128	@ 0x80
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MSBReset>:

// Reset the droppers and servos
void MSBReset() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006e4:	23a0      	movs	r3, #160	@ 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2200      	movs	r2, #0
 80006ea:	2140      	movs	r1, #64	@ 0x40
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fe5d 	bl	80013ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f2:	23a0      	movs	r3, #160	@ 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2200      	movs	r2, #0
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fe56 	bl	80013ac <HAL_GPIO_WritePin>
	setServo1Pos(SERVO_RESET_POS);
 8000700:	2032      	movs	r0, #50	@ 0x32
 8000702:	f7ff ffbb 	bl	800067c <setServo1Pos>
	setServo2Pos(SERVO_RESET_POS);
 8000706:	2032      	movs	r0, #50	@ 0x32
 8000708:	f7ff ffd1 	bl	80006ae <setServo2Pos>
}
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <HAL_I2C_AddrCallback>:

// Callback function for when I2C transmission is received and address matches
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	0008      	movs	r0, r1
 800071e:	0011      	movs	r1, r2
 8000720:	1cfb      	adds	r3, r7, #3
 8000722:	1c02      	adds	r2, r0, #0
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	003b      	movs	r3, r7
 8000728:	1c0a      	adds	r2, r1, #0
 800072a:	801a      	strh	r2, [r3, #0]
	if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 800072c:	1cfb      	adds	r3, r7, #3
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d105      	bne.n	8000740 <HAL_I2C_AddrCallback+0x2c>
		HAL_I2C_Slave_Receive_IT(&hi2c1, &rxBuffer, BUFFER_SIZE);
 8000734:	4904      	ldr	r1, [pc, #16]	@ (8000748 <HAL_I2C_AddrCallback+0x34>)
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_I2C_AddrCallback+0x38>)
 8000738:	2201      	movs	r2, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f000 feea 	bl	8001514 <HAL_I2C_Slave_Receive_IT>
	}
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b002      	add	sp, #8
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000bc 	.word	0x200000bc
 800074c:	20000028 	.word	0x20000028

08000750 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	switch (rxBuffer) {
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <HAL_I2C_SlaveRxCpltCallback+0x5c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b04      	cmp	r3, #4
 800075e:	d81f      	bhi.n	80007a0 <HAL_I2C_SlaveRxCpltCallback+0x50>
 8000760:	009a      	lsls	r2, r3, #2
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	469f      	mov	pc, r3
	case RESET:
		MSBReset();
 800076a:	f7ff ffb9 	bl	80006e0 <MSBReset>
		break;
 800076e:	e018      	b.n	80007a2 <HAL_I2C_SlaveRxCpltCallback+0x52>
	case D1_TRIG:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000770:	23a0      	movs	r3, #160	@ 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	@ 0x40
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fe17 	bl	80013ac <HAL_GPIO_WritePin>
		break;
 800077e:	e010      	b.n	80007a2 <HAL_I2C_SlaveRxCpltCallback+0x52>
	case D2_TRIG:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000780:	23a0      	movs	r3, #160	@ 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fe0f 	bl	80013ac <HAL_GPIO_WritePin>
		break;
 800078e:	e008      	b.n	80007a2 <HAL_I2C_SlaveRxCpltCallback+0x52>
	case SERVO1_TRIG:
		setServo1Pos(SERVO_TRIG_POS);
 8000790:	200a      	movs	r0, #10
 8000792:	f7ff ff73 	bl	800067c <setServo1Pos>
		break;
 8000796:	e004      	b.n	80007a2 <HAL_I2C_SlaveRxCpltCallback+0x52>
	case SERVO2_TRIG:
		setServo2Pos(SERVO_TRIG_POS);
 8000798:	200a      	movs	r0, #10
 800079a:	f7ff ff88 	bl	80006ae <setServo2Pos>
		break;
 800079e:	e000      	b.n	80007a2 <HAL_I2C_SlaveRxCpltCallback+0x52>
	default:
		break;
 80007a0:	46c0      	nop			@ (mov r8, r8)
	}
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	200000bc 	.word	0x200000bc
 80007b0:	08004300 	.word	0x08004300

080007b4 <HAL_I2C_ErrorCallback>:

// Error callback in case of I2C error
void HAL_I2C_ErrorCallback (I2C_HandleTypeDef * hi2c) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <HAL_I2C_ErrorCallback+0x18>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fefe 	bl	80015c0 <HAL_I2C_EnableListen_IT>
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000028 	.word	0x20000028

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 faca 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f81c 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 f930 	bl	8000a40 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e0:	f000 f884 	bl	80008ec <MX_I2C1_Init>
  MX_TIM2_Init();
 80007e4:	f000 f8c2 	bl	800096c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <main+0x3c>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f003 fa13 	bl	8003c18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <main+0x3c>)
 80007f4:	2104      	movs	r1, #4
 80007f6:	0018      	movs	r0, r3
 80007f8:	f003 fa0e 	bl	8003c18 <HAL_TIM_PWM_Start>
  HAL_I2C_EnableListen_IT(&hi2c1);		//Enables the interrupt to listen for the slave address sent
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <main+0x40>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fede 	bl	80015c0 <HAL_I2C_EnableListen_IT>

  MSBReset();
 8000804:	f7ff ff6c 	bl	80006e0 <MSBReset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	e7fd      	b.n	8000808 <main+0x38>
 800080c:	2000007c 	.word	0x2000007c
 8000810:	20000028 	.word	0x20000028

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b09f      	sub	sp, #124	@ 0x7c
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	2440      	movs	r4, #64	@ 0x40
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2338      	movs	r3, #56	@ 0x38
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f003 fd33 	bl	8004290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082a:	232c      	movs	r3, #44	@ 0x2c
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	0018      	movs	r0, r3
 8000830:	2314      	movs	r3, #20
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f003 fd2b 	bl	8004290 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	0018      	movs	r0, r3
 800083e:	2328      	movs	r3, #40	@ 0x28
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f003 fd24 	bl	8004290 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <SystemClock_Config+0xd0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <SystemClock_Config+0xd4>)
 800084e:	401a      	ands	r2, r3
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <SystemClock_Config+0xd0>)
 8000852:	2180      	movs	r1, #128	@ 0x80
 8000854:	0109      	lsls	r1, r1, #4
 8000856:	430a      	orrs	r2, r1
 8000858:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800085a:	0021      	movs	r1, r4
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2210      	movs	r2, #16
 8000860:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2201      	movs	r2, #1
 8000866:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	22a0      	movs	r2, #160	@ 0xa0
 8000872:	0212      	lsls	r2, r2, #8
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	187b      	adds	r3, r7, r1
 800087e:	0018      	movs	r0, r3
 8000880:	f002 fa2a 	bl	8002cd8 <HAL_RCC_OscConfig>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000888:	f000 f956 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	212c      	movs	r1, #44	@ 0x2c
 800088e:	187b      	adds	r3, r7, r1
 8000890:	220f      	movs	r2, #15
 8000892:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2100      	movs	r1, #0
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 fde5 	bl	8003480 <HAL_RCC_ClockConfig>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008ba:	f000 f93d 	bl	8000b38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2208      	movs	r2, #8
 80008c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 ffc5 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d6:	f000 f92f 	bl	8000b38 <Error_Handler>
  }
}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b01f      	add	sp, #124	@ 0x7c
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	40007000 	.word	0x40007000
 80008e8:	ffffe7ff 	.word	0xffffe7ff

080008ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_I2C1_Init+0x78>)
 80008f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000968 <MX_I2C1_Init+0x7c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C1_Init+0x78>)
 80008f8:	22c1      	movs	r2, #193	@ 0xc1
 80008fa:	00d2      	lsls	r2, r2, #3
 80008fc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 64;
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <MX_I2C1_Init+0x78>)
 8000900:	2240      	movs	r2, #64	@ 0x40
 8000902:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000904:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_I2C1_Init+0x78>)
 8000906:	2201      	movs	r2, #1
 8000908:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_I2C1_Init+0x78>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_I2C1_Init+0x78>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_I2C1_Init+0x78>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C1_Init+0x78>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_I2C1_Init+0x78>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000928:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_I2C1_Init+0x78>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fd5c 	bl	80013e8 <HAL_I2C_Init>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000934:	f000 f900 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_I2C1_Init+0x78>)
 800093a:	2100      	movs	r1, #0
 800093c:	0018      	movs	r0, r3
 800093e:	f002 f933 	bl	8002ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000946:	f000 f8f7 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_I2C1_Init+0x78>)
 800094c:	2100      	movs	r1, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f002 f976 	bl	8002c40 <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000958:	f000 f8ee 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	20000028 	.word	0x20000028
 8000968:	40005400 	.word	0x40005400

0800096c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	2310      	movs	r3, #16
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	0018      	movs	r0, r3
 8000978:	2308      	movs	r3, #8
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f003 fc87 	bl	8004290 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	2310      	movs	r3, #16
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f003 fc80 	bl	8004290 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000990:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 8000992:	2280      	movs	r2, #128	@ 0x80
 8000994:	05d2      	lsls	r2, r2, #23
 8000996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 8000998:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 800099a:	2204      	movs	r2, #4
 800099c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000-1;
 80009a4:	4b24      	ldr	r3, [pc, #144]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 80009a6:	4a25      	ldr	r2, [pc, #148]	@ (8000a3c <MX_TIM2_Init+0xd0>)
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f003 f8ed 	bl	8003b98 <HAL_TIM_PWM_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009c2:	f000 f8b9 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2110      	movs	r1, #16
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f003 fbfa 	bl	80041d4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f8a8 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	003b      	movs	r3, r7
 80009ea:	2260      	movs	r2, #96	@ 0x60
 80009ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009ee:	003b      	movs	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	003b      	movs	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fa:	003b      	movs	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a00:	0039      	movs	r1, r7
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f003 f998 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000a10:	f000 f892 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a14:	0039      	movs	r1, r7
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f003 f98e 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000a24:	f000 f888 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <MX_TIM2_Init+0xcc>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f900 	bl	8000c30 <HAL_TIM_MspPostInit>

}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b006      	add	sp, #24
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000007c 	.word	0x2000007c
 8000a3c:	00001f3f 	.word	0x00001f3f

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	240c      	movs	r4, #12
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2314      	movs	r3, #20
 8000a4e:	001a      	movs	r2, r3
 8000a50:	2100      	movs	r1, #0
 8000a52:	f003 fc1d 	bl	8004290 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b36      	ldr	r3, [pc, #216]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a66:	2204      	movs	r2, #4
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a72:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	430a      	orrs	r2, r1
 8000a78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	2280      	movs	r2, #128	@ 0x80
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a8a:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a92:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <MX_GPIO_Init+0xf0>)
 8000a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a9e:	23a0      	movs	r3, #160	@ 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	21e0      	movs	r1, #224	@ 0xe0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fc80 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <MX_GPIO_Init+0xf4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2130      	movs	r1, #48	@ 0x30
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fc7a 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	0192      	lsls	r2, r2, #6
 8000abe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2284      	movs	r2, #132	@ 0x84
 8000ac4:	0392      	lsls	r2, r2, #14
 8000ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	4a18      	ldr	r2, [pc, #96]	@ (8000b34 <MX_GPIO_Init+0xf4>)
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0010      	movs	r0, r2
 8000ad6:	f000 faeb 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	22e0      	movs	r2, #224	@ 0xe0
 8000ade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	193a      	adds	r2, r7, r4
 8000af4:	23a0      	movs	r3, #160	@ 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fad8 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b00:	0021      	movs	r1, r4
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2230      	movs	r2, #48	@ 0x30
 8000b06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <MX_GPIO_Init+0xf4>)
 8000b1e:	0019      	movs	r1, r3
 8000b20:	0010      	movs	r0, r2
 8000b22:	f000 fac5 	bl	80010b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b009      	add	sp, #36	@ 0x24
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	40021000 	.word	0x40021000
 8000b34:	50000800 	.word	0x50000800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_MspInit+0x24>)
 8000b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_MspInit+0x24>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	430a      	orrs	r2, r1
 8000b52:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <HAL_MspInit+0x24>)
 8000b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_MspInit+0x24>)
 8000b5a:	2180      	movs	r1, #128	@ 0x80
 8000b5c:	0549      	lsls	r1, r1, #21
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b089      	sub	sp, #36	@ 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	240c      	movs	r4, #12
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f003 fb86 	bl	8004290 <memset>
  if(hi2c->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1c      	ldr	r2, [pc, #112]	@ (8000bfc <HAL_I2C_MspInit+0x90>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d132      	bne.n	8000bf4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_I2C_MspInit+0x94>)
 8000b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_I2C_MspInit+0x94>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_I2C_MspInit+0x94>)
 8000b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	22c0      	movs	r2, #192	@ 0xc0
 8000baa:	00d2      	lsls	r2, r2, #3
 8000bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	0021      	movs	r1, r4
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2212      	movs	r2, #18
 8000bb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2206      	movs	r2, #6
 8000bc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	187a      	adds	r2, r7, r1
 8000bca:	23a0      	movs	r3, #160	@ 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	0011      	movs	r1, r2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 fa6d 	bl	80010b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_I2C_MspInit+0x94>)
 8000bd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_I2C_MspInit+0x94>)
 8000bdc:	2180      	movs	r1, #128	@ 0x80
 8000bde:	0389      	lsls	r1, r1, #14
 8000be0:	430a      	orrs	r2, r1
 8000be2:	639a      	str	r2, [r3, #56]	@ 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2017      	movs	r0, #23
 8000bea:	f000 f9db 	bl	8000fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000bee:	2017      	movs	r0, #23
 8000bf0:	f000 f9ed 	bl	8000fce <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b009      	add	sp, #36	@ 0x24
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	40005400 	.word	0x40005400
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d105      	bne.n	8000c24 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <HAL_TIM_PWM_MspInit+0x28>)
 8000c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_TIM_PWM_MspInit+0x28>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	430a      	orrs	r2, r1
 8000c22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	240c      	movs	r4, #12
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2314      	movs	r3, #20
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f003 fb24 	bl	8004290 <memset>
  if(htim->Instance==TIM2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d122      	bne.n	8000c9a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <HAL_TIM_MspPostInit+0x74>)
 8000c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_TIM_MspPostInit+0x74>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c60:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <HAL_TIM_MspPostInit+0x74>)
 8000c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c64:	2201      	movs	r2, #1
 8000c66:	4013      	ands	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c6c:	0021      	movs	r1, r4
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2203      	movs	r2, #3
 8000c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2202      	movs	r2, #2
 8000c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2202      	movs	r2, #2
 8000c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	187a      	adds	r2, r7, r1
 8000c8e:	23a0      	movs	r3, #160	@ 0xa0
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 fa0b 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b009      	add	sp, #36	@ 0x24
 8000ca0:	bd90      	pop	{r4, r7, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8a0 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <I2C1_IRQHandler+0x2c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	699a      	ldr	r2, [r3, #24]
 8000ce6:	23e0      	movs	r3, #224	@ 0xe0
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4013      	ands	r3, r2
 8000cec:	d004      	beq.n	8000cf8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <I2C1_IRQHandler+0x2c>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fca1 	bl	8001638 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000cf6:	e003      	b.n	8000d00 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <I2C1_IRQHandler+0x2c>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fc82 	bl	8001604 <HAL_I2C_EV_IRQHandler>
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000028 	.word	0x20000028

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d1c:	f7ff fff6 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <LoopForever+0xe>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	@ (8000d64 <LoopForever+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000d46:	f003 faab 	bl	80042a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fd41 	bl	80007d0 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
   ldr   r0, =_estack
 8000d50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d5c:	08004340 	.word	0x08004340
  ldr r2, =_sbss
 8000d60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d64:	200000c4 	.word	0x200000c4

08000d68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_COMP_IRQHandler>
	...

08000d6c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_Init+0x3c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_Init+0x3c>)
 8000d7e:	2140      	movs	r1, #64	@ 0x40
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f811 	bl	8000dac <HAL_InitTick>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e001      	b.n	8000d9a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d96:	f7ff fed5 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_InitTick+0x5c>)
 8000db6:	681c      	ldr	r4, [r3, #0]
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <HAL_InitTick+0x60>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	23fa      	movs	r3, #250	@ 0xfa
 8000dc0:	0098      	lsls	r0, r3, #2
 8000dc2:	f7ff f9a1 	bl	8000108 <__udivsi3>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f7ff f99c 	bl	8000108 <__udivsi3>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 f90b 	bl	8000fee <HAL_SYSTICK_Config>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e00f      	b.n	8000e00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d80b      	bhi.n	8000dfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	2301      	movs	r3, #1
 8000dea:	425b      	negs	r3, r3
 8000dec:	2200      	movs	r2, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 f8d8 	bl	8000fa4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_InitTick+0x64>)
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	18d2      	adds	r2, r2, r3
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	20000008 	.word	0x20000008
 8000e34:	200000c0 	.word	0x200000c0

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	@ (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	200000c0 	.word	0x200000c0

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	0002      	movs	r2, r0
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5e:	d809      	bhi.n	8000e74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	001a      	movs	r2, r3
 8000e66:	231f      	movs	r3, #31
 8000e68:	401a      	ands	r2, r3
 8000e6a:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <__NVIC_EnableIRQ+0x30>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4091      	lsls	r1, r2
 8000e70:	000a      	movs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
  }
}
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0002      	movs	r2, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e94:	d828      	bhi.n	8000ee8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e96:	4a2f      	ldr	r2, [pc, #188]	@ (8000f54 <__NVIC_SetPriority+0xd4>)
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	33c0      	adds	r3, #192	@ 0xc0
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	589b      	ldr	r3, [r3, r2]
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	2203      	movs	r2, #3
 8000eae:	400a      	ands	r2, r1
 8000eb0:	00d2      	lsls	r2, r2, #3
 8000eb2:	21ff      	movs	r1, #255	@ 0xff
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	22ff      	movs	r2, #255	@ 0xff
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2303      	movs	r3, #3
 8000ece:	4003      	ands	r3, r0
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	481f      	ldr	r0, [pc, #124]	@ (8000f54 <__NVIC_SetPriority+0xd4>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	33c0      	adds	r3, #192	@ 0xc0
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ee6:	e031      	b.n	8000f4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f58 <__NVIC_SetPriority+0xd8>)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	0019      	movs	r1, r3
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	3b08      	subs	r3, #8
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3306      	adds	r3, #6
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	18d3      	adds	r3, r2, r3
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1dfa      	adds	r2, r7, #7
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	0011      	movs	r1, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	00d2      	lsls	r2, r2, #3
 8000f0e:	21ff      	movs	r1, #255	@ 0xff
 8000f10:	4091      	lsls	r1, r2
 8000f12:	000a      	movs	r2, r1
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	401a      	ands	r2, r3
 8000f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	22ff      	movs	r2, #255	@ 0xff
 8000f20:	401a      	ands	r2, r3
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0018      	movs	r0, r3
 8000f28:	2303      	movs	r3, #3
 8000f2a:	4003      	ands	r3, r0
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f30:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <__NVIC_SetPriority+0xd8>)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	001c      	movs	r4, r3
 8000f38:	230f      	movs	r3, #15
 8000f3a:	4023      	ands	r3, r4
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	430a      	orrs	r2, r1
 8000f42:	3306      	adds	r3, #6
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	18c3      	adds	r3, r0, r3
 8000f48:	3304      	adds	r3, #4
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b003      	add	sp, #12
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	045b      	lsls	r3, r3, #17
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d301      	bcc.n	8000f74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f70:	2301      	movs	r3, #1
 8000f72:	e010      	b.n	8000f96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <SysTick_Config+0x44>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	3a01      	subs	r2, #1
 8000f7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	425b      	negs	r3, r3
 8000f80:	2103      	movs	r1, #3
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff ff7c 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <SysTick_Config+0x44>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SysTick_Config+0x44>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	210f      	movs	r1, #15
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	1c02      	adds	r2, r0, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b004      	add	sp, #16
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ff33 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff ffaf 	bl	8000f5c <SysTick_Config>
 8000ffe:	0003      	movs	r3, r0
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	210f      	movs	r1, #15
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2225      	movs	r2, #37	@ 0x25
 800101c:	5c9b      	ldrb	r3, [r3, r2]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d006      	beq.n	8001032 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2204      	movs	r2, #4
 8001028:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e02a      	b.n	8001088 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	210e      	movs	r1, #14
 800103e:	438a      	bics	r2, r1
 8001040:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	438a      	bics	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	221c      	movs	r2, #28
 8001058:	401a      	ands	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	2101      	movs	r1, #1
 8001060:	4091      	lsls	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2225      	movs	r2, #37	@ 0x25
 800106a:	2101      	movs	r1, #1
 800106c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2224      	movs	r2, #36	@ 0x24
 8001072:	2100      	movs	r1, #0
 8001074:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	0010      	movs	r0, r2
 8001086:	4798      	blx	r3
    }
  }
  return status;
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	781b      	ldrb	r3, [r3, #0]
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2225      	movs	r2, #37	@ 0x25
 80010a2:	5c9b      	ldrb	r3, [r3, r2]
 80010a4:	b2db      	uxtb	r3, r3
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c6:	e155      	b.n	8001374 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4091      	lsls	r1, r2
 80010d2:	000a      	movs	r2, r1
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <HAL_GPIO_Init+0x30>
 80010de:	e146      	b.n	800136e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	2201      	movs	r2, #1
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2203      	movs	r2, #3
 8001160:	4013      	ands	r3, r2
 8001162:	2b03      	cmp	r3, #3
 8001164:	d017      	beq.n	8001196 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	58d3      	ldr	r3, [r2, r3]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2207      	movs	r2, #7
 80011b4:	4013      	ands	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2107      	movs	r1, #7
 80011ce:	400b      	ands	r3, r1
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	6939      	ldr	r1, [r7, #16]
 80011e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	401a      	ands	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	23c0      	movs	r3, #192	@ 0xc0
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x17c>
 800122a:	e0a0      	b.n	800136e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	4b57      	ldr	r3, [pc, #348]	@ (800138c <HAL_GPIO_Init+0x2dc>)
 800122e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001230:	4b56      	ldr	r3, [pc, #344]	@ (800138c <HAL_GPIO_Init+0x2dc>)
 8001232:	2101      	movs	r1, #1
 8001234:	430a      	orrs	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001238:	4a55      	ldr	r2, [pc, #340]	@ (8001390 <HAL_GPIO_Init+0x2e0>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	589b      	ldr	r3, [r3, r2]
 8001244:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	23a0      	movs	r3, #160	@ 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	429a      	cmp	r2, r3
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x1f6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4a      	ldr	r2, [pc, #296]	@ (8001394 <HAL_GPIO_Init+0x2e4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x1f2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a49      	ldr	r2, [pc, #292]	@ (8001398 <HAL_GPIO_Init+0x2e8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x1ee>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a48      	ldr	r2, [pc, #288]	@ (800139c <HAL_GPIO_Init+0x2ec>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x1ea>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a47      	ldr	r2, [pc, #284]	@ (80013a0 <HAL_GPIO_Init+0x2f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x1e6>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a46      	ldr	r2, [pc, #280]	@ (80013a4 <HAL_GPIO_Init+0x2f4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x1e2>
 800128e:	2305      	movs	r3, #5
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x1f8>
 8001292:	2306      	movs	r3, #6
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x1f8>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x1f8>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x1f8>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x1f8>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x1f8>
 80012a6:	2300      	movs	r3, #0
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	2103      	movs	r1, #3
 80012ac:	400a      	ands	r2, r1
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	@ (8001390 <HAL_GPIO_Init+0x2e0>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b38      	ldr	r3, [pc, #224]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2380      	movs	r3, #128	@ 0x80
 80012dc:	035b      	lsls	r3, r3, #13
 80012de:	4013      	ands	r3, r2
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ea:	4b2f      	ldr	r3, [pc, #188]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	039b      	lsls	r3, r3, #14
 8001308:	4013      	ands	r3, r2
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001314:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43da      	mvns	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	4013      	ands	r3, r2
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_GPIO_Init+0x2f8>)
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	40da      	lsrs	r2, r3
 800137c:	1e13      	subs	r3, r2, #0
 800137e:	d000      	beq.n	8001382 <HAL_GPIO_Init+0x2d2>
 8001380:	e6a2      	b.n	80010c8 <HAL_GPIO_Init+0x18>
  }
}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b006      	add	sp, #24
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000
 8001394:	50000400 	.word	0x50000400
 8001398:	50000800 	.word	0x50000800
 800139c:	50000c00 	.word	0x50000c00
 80013a0:	50001000 	.word	0x50001000
 80013a4:	50001c00 	.word	0x50001c00
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	0008      	movs	r0, r1
 80013b6:	0011      	movs	r1, r2
 80013b8:	1cbb      	adds	r3, r7, #2
 80013ba:	1c02      	adds	r2, r0, #0
 80013bc:	801a      	strh	r2, [r3, #0]
 80013be:	1c7b      	adds	r3, r7, #1
 80013c0:	1c0a      	adds	r2, r1, #0
 80013c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c4:	1c7b      	adds	r3, r7, #1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013cc:	1cbb      	adds	r3, r7, #2
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013d6:	1cbb      	adds	r3, r7, #2
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e082      	b.n	8001500 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2241      	movs	r2, #65	@ 0x41
 80013fe:	5c9b      	ldrb	r3, [r3, r2]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2240      	movs	r2, #64	@ 0x40
 800140a:	2100      	movs	r1, #0
 800140c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fbab 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2241      	movs	r2, #65	@ 0x41
 800141a:	2124      	movs	r1, #36	@ 0x24
 800141c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	438a      	bics	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4934      	ldr	r1, [pc, #208]	@ (8001508 <HAL_I2C_Init+0x120>)
 8001438:	400a      	ands	r2, r1
 800143a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4931      	ldr	r1, [pc, #196]	@ (800150c <HAL_I2C_Init+0x124>)
 8001448:	400a      	ands	r2, r1
 800144a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2180      	movs	r1, #128	@ 0x80
 800145e:	0209      	lsls	r1, r1, #8
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e007      	b.n	8001476 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2184      	movs	r1, #132	@ 0x84
 8001470:	0209      	lsls	r1, r1, #8
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d104      	bne.n	8001488 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	491f      	ldr	r1, [pc, #124]	@ (8001510 <HAL_I2C_Init+0x128>)
 8001494:	430a      	orrs	r2, r1
 8001496:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	491a      	ldr	r1, [pc, #104]	@ (800150c <HAL_I2C_Init+0x124>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69d9      	ldr	r1, [r3, #28]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1a      	ldr	r2, [r3, #32]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2241      	movs	r2, #65	@ 0x41
 80014ec:	2120      	movs	r1, #32
 80014ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2242      	movs	r2, #66	@ 0x42
 80014fa:	2100      	movs	r1, #0
 80014fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}
 8001508:	f0ffffff 	.word	0xf0ffffff
 800150c:	ffff7fff 	.word	0xffff7fff
 8001510:	02008000 	.word	0x02008000

08001514 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	1dbb      	adds	r3, r7, #6
 8001520:	801a      	strh	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2241      	movs	r2, #65	@ 0x41
 8001526:	5c9b      	ldrb	r3, [r3, r2]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	d13b      	bne.n	80015a6 <HAL_I2C_Slave_Receive_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2240      	movs	r2, #64	@ 0x40
 8001532:	5c9b      	ldrb	r3, [r3, r2]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_I2C_Slave_Receive_IT+0x28>
 8001538:	2302      	movs	r3, #2
 800153a:	e035      	b.n	80015a8 <HAL_I2C_Slave_Receive_IT+0x94>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2240      	movs	r2, #64	@ 0x40
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2241      	movs	r2, #65	@ 0x41
 8001548:	2122      	movs	r1, #34	@ 0x22
 800154a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2242      	movs	r2, #66	@ 0x42
 8001550:	2120      	movs	r1, #32
 8001552:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4912      	ldr	r1, [pc, #72]	@ (80015b0 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001566:	400a      	ands	r2, r1
 8001568:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1dba      	adds	r2, r7, #6
 8001574:	8812      	ldrh	r2, [r2, #0]
 8001576:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_I2C_Slave_Receive_IT+0xa0>)
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_I2C_Slave_Receive_IT+0xa4>)
 800158c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2240      	movs	r2, #64	@ 0x40
 8001592:	2100      	movs	r1, #0
 8001594:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001596:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <HAL_I2C_Slave_Receive_IT+0xa8>)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0011      	movs	r1, r2
 800159c:	0018      	movs	r0, r3
 800159e:	f001 fa11 	bl	80029c4 <I2C_Enable_IRQ>

    return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_I2C_Slave_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80015a6:	2302      	movs	r3, #2
  }
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b004      	add	sp, #16
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	ffff7fff 	.word	0xffff7fff
 80015b4:	ffff0000 	.word	0xffff0000
 80015b8:	0800175d 	.word	0x0800175d
 80015bc:	00008002 	.word	0x00008002

080015c0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2241      	movs	r2, #65	@ 0x41
 80015cc:	5c9b      	ldrb	r3, [r3, r2]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d10f      	bne.n	80015f4 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2241      	movs	r2, #65	@ 0x41
 80015d8:	2128      	movs	r1, #40	@ 0x28
 80015da:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <HAL_I2C_EnableListen_IT+0x40>)
 80015e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	021a      	lsls	r2, r3, #8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0011      	movs	r1, r2
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 f9ea 	bl	80029c4 <I2C_Enable_IRQ>

    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e000      	b.n	80015f6 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
  }
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	0800175d 	.word	0x0800175d

08001604 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
  }
}
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b004      	add	sp, #16
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4013      	ands	r3, r2
 8001658:	d00e      	beq.n	8001678 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001660:	d00a      	beq.n	8001678 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	2201      	movs	r2, #1
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2280      	movs	r2, #128	@ 0x80
 8001674:	0052      	lsls	r2, r2, #1
 8001676:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4013      	ands	r3, r2
 8001680:	d00e      	beq.n	80016a0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001688:	d00a      	beq.n	80016a0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	2208      	movs	r2, #8
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	00d2      	lsls	r2, r2, #3
 800169e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d00e      	beq.n	80016c8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016b0:	d00a      	beq.n	80016c8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	2202      	movs	r2, #2
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	220b      	movs	r2, #11
 80016d2:	4013      	ands	r3, r2
 80016d4:	d005      	beq.n	80016e2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	0011      	movs	r1, r2
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 ffcb 	bl	8002678 <I2C_ITError>
  }
}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b006      	add	sp, #24
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2240      	movs	r2, #64	@ 0x40
 8001776:	5c9b      	ldrb	r3, [r3, r2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <I2C_Slave_ISR_IT+0x24>
 800177c:	2302      	movs	r3, #2
 800177e:	e0e6      	b.n	800194e <I2C_Slave_ISR_IT+0x1f2>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2240      	movs	r2, #64	@ 0x40
 8001784:	2101      	movs	r1, #1
 8001786:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2220      	movs	r2, #32
 800178c:	4013      	ands	r3, r2
 800178e:	d009      	beq.n	80017a4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001796:	d005      	beq.n	80017a4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fdf2 	bl	8002388 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2210      	movs	r2, #16
 80017a8:	4013      	ands	r3, r2
 80017aa:	d052      	beq.n	8001852 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2210      	movs	r2, #16
 80017b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017b2:	d04e      	beq.n	8001852 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d12d      	bne.n	800181a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2241      	movs	r2, #65	@ 0x41
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b28      	cmp	r3, #40	@ 0x28
 80017c8:	d10b      	bne.n	80017e2 <I2C_Slave_ISR_IT+0x86>
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	2380      	movs	r3, #128	@ 0x80
 80017ce:	049b      	lsls	r3, r3, #18
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d106      	bne.n	80017e2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	0011      	movs	r1, r2
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 fef4 	bl	80025c8 <I2C_ITListenCplt>
 80017e0:	e036      	b.n	8001850 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2241      	movs	r2, #65	@ 0x41
 80017e6:	5c9b      	ldrb	r3, [r3, r2]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b29      	cmp	r3, #41	@ 0x29
 80017ec:	d110      	bne.n	8001810 <I2C_Slave_ISR_IT+0xb4>
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4a59      	ldr	r2, [pc, #356]	@ (8001958 <I2C_Slave_ISR_IT+0x1fc>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00c      	beq.n	8001810 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2210      	movs	r2, #16
 80017fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	0018      	movs	r0, r3
 8001802:	f001 f864 	bl	80028ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0018      	movs	r0, r3
 800180a:	f000 fc8b 	bl	8002124 <I2C_ITSlaveSeqCplt>
 800180e:	e01f      	b.n	8001850 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2210      	movs	r2, #16
 8001816:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001818:	e091      	b.n	800193e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2210      	movs	r2, #16
 8001820:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	2204      	movs	r2, #4
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <I2C_Slave_ISR_IT+0xe4>
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	045b      	lsls	r3, r3, #17
 800183a:	429a      	cmp	r2, r3
 800183c:	d000      	beq.n	8001840 <I2C_Slave_ISR_IT+0xe4>
 800183e:	e07e      	b.n	800193e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f000 ff15 	bl	8002678 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800184e:	e076      	b.n	800193e <I2C_Slave_ISR_IT+0x1e2>
 8001850:	e075      	b.n	800193e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2204      	movs	r2, #4
 8001856:	4013      	ands	r3, r2
 8001858:	d02f      	beq.n	80018ba <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2204      	movs	r2, #4
 800185e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001860:	d02b      	beq.n	80018ba <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001866:	b29b      	uxth	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d018      	beq.n	800189e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d14c      	bne.n	8001942 <I2C_Slave_ISR_IT+0x1e6>
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001958 <I2C_Slave_ISR_IT+0x1fc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d048      	beq.n	8001942 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 fc36 	bl	8002124 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80018b8:	e043      	b.n	8001942 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2208      	movs	r2, #8
 80018be:	4013      	ands	r3, r2
 80018c0:	d00a      	beq.n	80018d8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2208      	movs	r2, #8
 80018c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018c8:	d006      	beq.n	80018d8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fb41 	bl	8001f58 <I2C_ITAddrCplt>
 80018d6:	e035      	b.n	8001944 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2202      	movs	r2, #2
 80018dc:	4013      	ands	r3, r2
 80018de:	d031      	beq.n	8001944 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018e6:	d02d      	beq.n	8001944 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d018      	beq.n	8001924 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001922:	e00f      	b.n	8001944 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	045b      	lsls	r3, r3, #17
 800192a:	429a      	cmp	r2, r3
 800192c:	d002      	beq.n	8001934 <I2C_Slave_ISR_IT+0x1d8>
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d107      	bne.n	8001944 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 fbf4 	bl	8002124 <I2C_ITSlaveSeqCplt>
 800193c:	e002      	b.n	8001944 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	e000      	b.n	8001944 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001942:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2240      	movs	r2, #64	@ 0x40
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b006      	add	sp, #24
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	ffff0000 	.word	0xffff0000

0800195c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2240      	movs	r2, #64	@ 0x40
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <I2C_Master_ISR_DMA+0x1a>
 8001972:	2302      	movs	r3, #2
 8001974:	e0e7      	b.n	8001b46 <I2C_Master_ISR_DMA+0x1ea>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2240      	movs	r2, #64	@ 0x40
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2210      	movs	r2, #16
 8001982:	4013      	ands	r3, r2
 8001984:	d017      	beq.n	80019b6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2210      	movs	r2, #16
 800198a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800198c:	d013      	beq.n	80019b6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2210      	movs	r2, #16
 8001994:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	2204      	movs	r2, #4
 800199c:	431a      	orrs	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2120      	movs	r1, #32
 80019a6:	0018      	movs	r0, r3
 80019a8:	f001 f80c 	bl	80029c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 ff8d 	bl	80028ce <I2C_Flush_TXDR>
 80019b4:	e0c2      	b.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2280      	movs	r2, #128	@ 0x80
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <I2C_Master_ISR_DMA+0x64>
 80019be:	e07c      	b.n	8001aba <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2240      	movs	r2, #64	@ 0x40
 80019c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80019c6:	d100      	bne.n	80019ca <I2C_Master_ISR_DMA+0x6e>
 80019c8:	e077      	b.n	8001aba <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2140      	movs	r1, #64	@ 0x40
 80019d6:	438a      	bics	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d055      	beq.n	8001a90 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	2312      	movs	r3, #18
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	0592      	lsls	r2, r2, #22
 80019f2:	0d92      	lsrs	r2, r2, #22
 80019f4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2bff      	cmp	r3, #255	@ 0xff
 80019fe:	d906      	bls.n	8001a0e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	22ff      	movs	r2, #255	@ 0xff
 8001a04:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	045b      	lsls	r3, r3, #17
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e010      	b.n	8001a30 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b50 <I2C_Master_ISR_DMA+0x1f4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d003      	beq.n	8001a2a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e002      	b.n	8001a30 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	049b      	lsls	r3, r3, #18
 8001a2e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	697c      	ldr	r4, [r7, #20]
 8001a38:	2312      	movs	r3, #18
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	8819      	ldrh	r1, [r3, #0]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0023      	movs	r3, r4
 8001a46:	f000 ff83 	bl	8002950 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2241      	movs	r2, #65	@ 0x41
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b22      	cmp	r3, #34	@ 0x22
 8001a66:	d109      	bne.n	8001a7c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2180      	movs	r1, #128	@ 0x80
 8001a74:	0209      	lsls	r1, r1, #8
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a7a:	e05f      	b.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	01c9      	lsls	r1, r1, #7
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a8e:	e055      	b.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	049b      	lsls	r3, r3, #18
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	049b      	lsls	r3, r3, #18
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d004      	beq.n	8001aae <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 fafa 	bl	80020a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001aac:	e046      	b.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2140      	movs	r1, #64	@ 0x40
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 fde0 	bl	8002678 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001ab8:	e040      	b.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2240      	movs	r2, #64	@ 0x40
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d02c      	beq.n	8001b1c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2240      	movs	r2, #64	@ 0x40
 8001ac6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ac8:	d028      	beq.n	8001b1c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d11d      	bne.n	8001b10 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	049b      	lsls	r3, r3, #18
 8001ade:	401a      	ands	r2, r3
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	049b      	lsls	r3, r3, #18
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d028      	beq.n	8001b3a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	4a18      	ldr	r2, [pc, #96]	@ (8001b50 <I2C_Master_ISR_DMA+0x1f4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d109      	bne.n	8001b06 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	01c9      	lsls	r1, r1, #7
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001b04:	e019      	b.n	8001b3a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 fac9 	bl	80020a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001b0e:	e014      	b.n	8001b3a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2140      	movs	r1, #64	@ 0x40
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 fdaf 	bl	8002678 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b1a:	e00e      	b.n	8001b3a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	4013      	ands	r3, r2
 8001b22:	d00b      	beq.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b2a:	d007      	beq.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	0011      	movs	r1, r2
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 fb5a 	bl	80021ec <I2C_ITMasterCplt>
 8001b38:	e000      	b.n	8001b3c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001b3a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	2100      	movs	r1, #0
 8001b42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b007      	add	sp, #28
 8001b4c:	bd90      	pop	{r4, r7, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	ffff0000 	.word	0xffff0000

08001b54 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001b60:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <I2C_Mem_ISR_DMA+0x230>)
 8001b62:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2240      	movs	r2, #64	@ 0x40
 8001b68:	5c9b      	ldrb	r3, [r3, r2]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <I2C_Mem_ISR_DMA+0x1e>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e104      	b.n	8001d7c <I2C_Mem_ISR_DMA+0x228>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2240      	movs	r2, #64	@ 0x40
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d017      	beq.n	8001bb2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2210      	movs	r2, #16
 8001b86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b88:	d013      	beq.n	8001bb2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	2204      	movs	r2, #4
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 ff0e 	bl	80029c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fe8f 	bl	80028ce <I2C_Flush_TXDR>
 8001bb0:	e0df      	b.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bc0:	d009      	beq.n	8001bd6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4252      	negs	r2, r2
 8001bd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bd4:	e0cd      	b.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2280      	movs	r2, #128	@ 0x80
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d05e      	beq.n	8001c9c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2240      	movs	r2, #64	@ 0x40
 8001be2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001be4:	d05a      	beq.n	8001c9c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2110      	movs	r1, #16
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 feea 	bl	80029c4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d04a      	beq.n	8001c90 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2bff      	cmp	r3, #255	@ 0xff
 8001c02:	d910      	bls.n	8001c26 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	22ff      	movs	r2, #255	@ 0xff
 8001c08:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	b299      	uxth	r1, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	045b      	lsls	r3, r3, #17
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	9400      	str	r4, [sp, #0]
 8001c20:	f000 fe96 	bl	8002950 <I2C_TransferConfig>
 8001c24:	e011      	b.n	8001c4a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c34:	b299      	uxth	r1, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	049b      	lsls	r3, r3, #18
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	2400      	movs	r4, #0
 8001c44:	9400      	str	r4, [sp, #0]
 8001c46:	f000 fe83 	bl	8002950 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2241      	movs	r2, #65	@ 0x41
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b22      	cmp	r3, #34	@ 0x22
 8001c66:	d109      	bne.n	8001c7c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	0209      	lsls	r1, r1, #8
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c7a:	e07a      	b.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	01c9      	lsls	r1, r1, #7
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c8e:	e070      	b.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2140      	movs	r1, #64	@ 0x40
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 fcef 	bl	8002678 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001c9a:	e06a      	b.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2240      	movs	r2, #64	@ 0x40
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d058      	beq.n	8001d56 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2240      	movs	r2, #64	@ 0x40
 8001ca8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001caa:	d054      	beq.n	8001d56 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2241      	movs	r2, #65	@ 0x41
 8001cb0:	5c9b      	ldrb	r3, [r3, r2]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b22      	cmp	r3, #34	@ 0x22
 8001cb6:	d101      	bne.n	8001cbc <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8001cb8:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <I2C_Mem_ISR_DMA+0x234>)
 8001cba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2bff      	cmp	r3, #255	@ 0xff
 8001cc4:	d911      	bls.n	8001cea <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	22ff      	movs	r2, #255	@ 0xff
 8001cca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	045c      	lsls	r4, r3, #17
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	0023      	movs	r3, r4
 8001ce4:	f000 fe34 	bl	8002950 <I2C_TransferConfig>
 8001ce8:	e012      	b.n	8001d10 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	049c      	lsls	r4, r3, #18
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	0023      	movs	r3, r4
 8001d0c:	f000 fe20 	bl	8002950 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2241      	movs	r2, #65	@ 0x41
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b22      	cmp	r3, #34	@ 0x22
 8001d2c:	d109      	bne.n	8001d42 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	0209      	lsls	r1, r1, #8
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d40:	e017      	b.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	01c9      	lsls	r1, r1, #7
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d54:	e00d      	b.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d64:	d005      	beq.n	8001d72 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f000 fa3d 	bl	80021ec <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2240      	movs	r2, #64	@ 0x40
 8001d76:	2100      	movs	r1, #0
 8001d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b007      	add	sp, #28
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	80002000 	.word	0x80002000
 8001d88:	80002400 	.word	0x80002400

08001d8c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2240      	movs	r2, #64	@ 0x40
 8001da6:	5c9b      	ldrb	r3, [r3, r2]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <I2C_Slave_ISR_DMA+0x24>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e0cd      	b.n	8001f4c <I2C_Slave_ISR_DMA+0x1c0>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2240      	movs	r2, #64	@ 0x40
 8001db4:	2101      	movs	r1, #1
 8001db6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dc6:	d005      	beq.n	8001dd4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 fada 	bl	8002388 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d100      	bne.n	8001dde <I2C_Slave_ISR_DMA+0x52>
 8001ddc:	e0a3      	b.n	8001f26 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2210      	movs	r2, #16
 8001de2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001de4:	d100      	bne.n	8001de8 <I2C_Slave_ISR_DMA+0x5c>
 8001de6:	e09e      	b.n	8001f26 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	01db      	lsls	r3, r3, #7
 8001dee:	4013      	ands	r3, r2
 8001df0:	d105      	bne.n	8001dfe <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001dfa:	d100      	bne.n	8001dfe <I2C_Slave_ISR_DMA+0x72>
 8001dfc:	e08c      	b.n	8001f18 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00c      	beq.n	8001e42 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	01db      	lsls	r3, r3, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d007      	beq.n	8001e42 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d12d      	bne.n	8001ea4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2241      	movs	r2, #65	@ 0x41
 8001e4c:	5c9b      	ldrb	r3, [r3, r2]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b28      	cmp	r3, #40	@ 0x28
 8001e52:	d10b      	bne.n	8001e6c <I2C_Slave_ISR_DMA+0xe0>
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	049b      	lsls	r3, r3, #18
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d106      	bne.n	8001e6c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	0011      	movs	r1, r2
 8001e64:	0018      	movs	r0, r3
 8001e66:	f000 fbaf 	bl	80025c8 <I2C_ITListenCplt>
 8001e6a:	e054      	b.n	8001f16 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2241      	movs	r2, #65	@ 0x41
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b29      	cmp	r3, #41	@ 0x29
 8001e76:	d110      	bne.n	8001e9a <I2C_Slave_ISR_DMA+0x10e>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <I2C_Slave_ISR_DMA+0x1c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00c      	beq.n	8001e9a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2210      	movs	r2, #16
 8001e86:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 fd1f 	bl	80028ce <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 f946 	bl	8002124 <I2C_ITSlaveSeqCplt>
 8001e98:	e03d      	b.n	8001f16 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001ea2:	e03e      	b.n	8001f22 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001eb8:	2317      	movs	r3, #23
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	2141      	movs	r1, #65	@ 0x41
 8001ec0:	5c52      	ldrb	r2, [r2, r1]
 8001ec2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d004      	beq.n	8001ed4 <I2C_Slave_ISR_DMA+0x148>
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	045b      	lsls	r3, r3, #17
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d126      	bne.n	8001f22 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ed4:	2217      	movs	r2, #23
 8001ed6:	18bb      	adds	r3, r7, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b21      	cmp	r3, #33	@ 0x21
 8001edc:	d003      	beq.n	8001ee6 <I2C_Slave_ISR_DMA+0x15a>
 8001ede:	18bb      	adds	r3, r7, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b29      	cmp	r3, #41	@ 0x29
 8001ee4:	d103      	bne.n	8001eee <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2221      	movs	r2, #33	@ 0x21
 8001eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eec:	e00b      	b.n	8001f06 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001eee:	2217      	movs	r2, #23
 8001ef0:	18bb      	adds	r3, r7, r2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b22      	cmp	r3, #34	@ 0x22
 8001ef6:	d003      	beq.n	8001f00 <I2C_Slave_ISR_DMA+0x174>
 8001ef8:	18bb      	adds	r3, r7, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001efe:	d102      	bne.n	8001f06 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2222      	movs	r2, #34	@ 0x22
 8001f04:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0011      	movs	r1, r2
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 fbb2 	bl	8002678 <I2C_ITError>
      if (treatdmanack == 1U)
 8001f14:	e005      	b.n	8001f22 <I2C_Slave_ISR_DMA+0x196>
 8001f16:	e004      	b.n	8001f22 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f20:	e00f      	b.n	8001f42 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8001f22:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f24:	e00d      	b.n	8001f42 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2208      	movs	r2, #8
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2208      	movs	r2, #8
 8001f32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f34:	d005      	beq.n	8001f42 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 f80b 	bl	8001f58 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2240      	movs	r2, #64	@ 0x40
 8001f46:	2100      	movs	r1, #0
 8001f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b008      	add	sp, #32
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	ffff0000 	.word	0xffff0000

08001f58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2241      	movs	r2, #65	@ 0x41
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	2328      	movs	r3, #40	@ 0x28
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b28      	cmp	r3, #40	@ 0x28
 8001f72:	d000      	beq.n	8001f76 <I2C_ITAddrCplt+0x1e>
 8001f74:	e088      	b.n	8002088 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	250f      	movs	r5, #15
 8001f82:	197b      	adds	r3, r7, r5
 8001f84:	2101      	movs	r1, #1
 8001f86:	400a      	ands	r2, r1
 8001f88:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	200c      	movs	r0, #12
 8001f96:	183b      	adds	r3, r7, r0
 8001f98:	21fe      	movs	r1, #254	@ 0xfe
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	240a      	movs	r4, #10
 8001fa8:	193b      	adds	r3, r7, r4
 8001faa:	0592      	lsls	r2, r2, #22
 8001fac:	0d92      	lsrs	r2, r2, #22
 8001fae:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	2308      	movs	r3, #8
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	21fe      	movs	r1, #254	@ 0xfe
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d148      	bne.n	800205c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001fca:	0021      	movs	r1, r4
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	09db      	lsrs	r3, r3, #7
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	4053      	eors	r3, r2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	001a      	movs	r2, r3
 8001fde:	2306      	movs	r3, #6
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d120      	bne.n	8002026 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001fe4:	183b      	adds	r3, r7, r0
 8001fe6:	187a      	adds	r2, r7, r1
 8001fe8:	8812      	ldrh	r2, [r2, #0]
 8001fea:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d14c      	bne.n	8002098 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2208      	movs	r2, #8
 800200a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	2100      	movs	r1, #0
 8002012:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002014:	183b      	adds	r3, r7, r0
 8002016:	881a      	ldrh	r2, [r3, #0]
 8002018:	197b      	adds	r3, r7, r5
 800201a:	7819      	ldrb	r1, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f7fe fb78 	bl	8000714 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002024:	e038      	b.n	8002098 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002026:	240c      	movs	r4, #12
 8002028:	193b      	adds	r3, r7, r4
 800202a:	2208      	movs	r2, #8
 800202c:	18ba      	adds	r2, r7, r2
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	021a      	lsls	r2, r3, #8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0011      	movs	r1, r2
 800203a:	0018      	movs	r0, r3
 800203c:	f000 fd50 	bl	8002ae0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2240      	movs	r2, #64	@ 0x40
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002048:	193b      	adds	r3, r7, r4
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	230f      	movs	r3, #15
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	7819      	ldrb	r1, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f7fe fb5d 	bl	8000714 <HAL_I2C_AddrCallback>
}
 800205a:	e01d      	b.n	8002098 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f000 fd3b 	bl	8002ae0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2240      	movs	r2, #64	@ 0x40
 800206e:	2100      	movs	r1, #0
 8002070:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002072:	230c      	movs	r3, #12
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	881a      	ldrh	r2, [r3, #0]
 8002078:	230f      	movs	r3, #15
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	7819      	ldrb	r1, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe fb47 	bl	8000714 <HAL_I2C_AddrCallback>
}
 8002086:	e007      	b.n	8002098 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2208      	movs	r2, #8
 800208e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]
}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bdb0      	pop	{r4, r5, r7, pc}

080020a0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2242      	movs	r2, #66	@ 0x42
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2241      	movs	r2, #65	@ 0x41
 80020b4:	5c9b      	ldrb	r3, [r3, r2]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b21      	cmp	r3, #33	@ 0x21
 80020ba:	d117      	bne.n	80020ec <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2241      	movs	r2, #65	@ 0x41
 80020c0:	2120      	movs	r1, #32
 80020c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2211      	movs	r2, #17
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2101      	movs	r1, #1
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fd03 	bl	8002ae0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2240      	movs	r2, #64	@ 0x40
 80020de:	2100      	movs	r1, #0
 80020e0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff fb00 	bl	80016ea <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020ea:	e016      	b.n	800211a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2241      	movs	r2, #65	@ 0x41
 80020f0:	2120      	movs	r1, #32
 80020f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2212      	movs	r2, #18
 80020f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2102      	movs	r1, #2
 8002104:	0018      	movs	r0, r3
 8002106:	f000 fceb 	bl	8002ae0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2240      	movs	r2, #64	@ 0x40
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff faf0 	bl	80016fa <HAL_I2C_MasterRxCpltCallback>
}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2242      	movs	r2, #66	@ 0x42
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	01db      	lsls	r3, r3, #7
 8002142:	4013      	ands	r3, r2
 8002144:	d008      	beq.n	8002158 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4924      	ldr	r1, [pc, #144]	@ (80021e4 <I2C_ITSlaveSeqCplt+0xc0>)
 8002152:	400a      	ands	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e00c      	b.n	8002172 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	4013      	ands	r3, r2
 8002160:	d007      	beq.n	8002172 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	491e      	ldr	r1, [pc, #120]	@ (80021e8 <I2C_ITSlaveSeqCplt+0xc4>)
 800216e:	400a      	ands	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2241      	movs	r2, #65	@ 0x41
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b29      	cmp	r3, #41	@ 0x29
 800217c:	d114      	bne.n	80021a8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2241      	movs	r2, #65	@ 0x41
 8002182:	2128      	movs	r1, #40	@ 0x28
 8002184:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2221      	movs	r2, #33	@ 0x21
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2101      	movs	r1, #1
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fca5 	bl	8002ae0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2240      	movs	r2, #64	@ 0x40
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fab2 	bl	800170a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80021a6:	e019      	b.n	80021dc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2241      	movs	r2, #65	@ 0x41
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80021b2:	d113      	bne.n	80021dc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2241      	movs	r2, #65	@ 0x41
 80021b8:	2128      	movs	r1, #40	@ 0x28
 80021ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2222      	movs	r2, #34	@ 0x22
 80021c0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2102      	movs	r1, #2
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fc8a 	bl	8002ae0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7fe faba 	bl	8000750 <HAL_I2C_SlaveRxCpltCallback>
}
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	ffffbfff 	.word	0xffffbfff
 80021e8:	ffff7fff 	.word	0xffff7fff

080021ec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2220      	movs	r2, #32
 8002200:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2241      	movs	r2, #65	@ 0x41
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b21      	cmp	r3, #33	@ 0x21
 800220c:	d108      	bne.n	8002220 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2101      	movs	r1, #1
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fc64 	bl	8002ae0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2211      	movs	r2, #17
 800221c:	631a      	str	r2, [r3, #48]	@ 0x30
 800221e:	e00d      	b.n	800223c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2241      	movs	r2, #65	@ 0x41
 8002224:	5c9b      	ldrb	r3, [r3, r2]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b22      	cmp	r3, #34	@ 0x22
 800222a:	d107      	bne.n	800223c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2102      	movs	r1, #2
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fc55 	bl	8002ae0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2212      	movs	r2, #18
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	494e      	ldr	r1, [pc, #312]	@ (8002380 <I2C_ITMasterCplt+0x194>)
 8002248:	400a      	ands	r2, r1
 800224a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	@ (8002384 <I2C_ITMasterCplt+0x198>)
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2210      	movs	r2, #16
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2210      	movs	r2, #16
 8002266:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	2204      	movs	r2, #4
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2241      	movs	r2, #65	@ 0x41
 8002278:	5c9b      	ldrb	r3, [r3, r2]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b60      	cmp	r3, #96	@ 0x60
 800227e:	d109      	bne.n	8002294 <I2C_ITMasterCplt+0xa8>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2204      	movs	r2, #4
 8002284:	4013      	ands	r3, r2
 8002286:	d005      	beq.n	8002294 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	b2db      	uxtb	r3, r3
 8002290:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002292:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0018      	movs	r0, r3
 8002298:	f000 fb19 	bl	80028ce <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	@ 0x41
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b60      	cmp	r3, #96	@ 0x60
 80022ac:	d002      	beq.n	80022b4 <I2C_ITMasterCplt+0xc8>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0011      	movs	r1, r2
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f9db 	bl	8002678 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022c2:	e058      	b.n	8002376 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2241      	movs	r2, #65	@ 0x41
 80022c8:	5c9b      	ldrb	r3, [r3, r2]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b21      	cmp	r3, #33	@ 0x21
 80022ce:	d126      	bne.n	800231e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2241      	movs	r2, #65	@ 0x41
 80022d4:	2120      	movs	r1, #32
 80022d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2242      	movs	r2, #66	@ 0x42
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b40      	cmp	r3, #64	@ 0x40
 80022e8:	d10c      	bne.n	8002304 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2242      	movs	r2, #66	@ 0x42
 80022ee:	2100      	movs	r1, #0
 80022f0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2240      	movs	r2, #64	@ 0x40
 80022f6:	2100      	movs	r1, #0
 80022f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff fa14 	bl	800172a <HAL_I2C_MemTxCpltCallback>
}
 8002302:	e038      	b.n	8002376 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2242      	movs	r2, #66	@ 0x42
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2240      	movs	r2, #64	@ 0x40
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff f9e7 	bl	80016ea <HAL_I2C_MasterTxCpltCallback>
}
 800231c:	e02b      	b.n	8002376 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2241      	movs	r2, #65	@ 0x41
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b22      	cmp	r3, #34	@ 0x22
 8002328:	d125      	bne.n	8002376 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2241      	movs	r2, #65	@ 0x41
 800232e:	2120      	movs	r1, #32
 8002330:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2242      	movs	r2, #66	@ 0x42
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b40      	cmp	r3, #64	@ 0x40
 8002342:	d10c      	bne.n	800235e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2242      	movs	r2, #66	@ 0x42
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2240      	movs	r2, #64	@ 0x40
 8002350:	2100      	movs	r1, #0
 8002352:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff f9ef 	bl	800173a <HAL_I2C_MemRxCpltCallback>
}
 800235c:	e00b      	b.n	8002376 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2242      	movs	r2, #66	@ 0x42
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2240      	movs	r2, #64	@ 0x40
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff f9c2 	bl	80016fa <HAL_I2C_MasterRxCpltCallback>
}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b006      	add	sp, #24
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	fe00e800 	.word	0xfe00e800
 8002384:	ffff0000 	.word	0xffff0000

08002388 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800239e:	200f      	movs	r0, #15
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	2141      	movs	r1, #65	@ 0x41
 80023a6:	5c52      	ldrb	r2, [r2, r1]
 80023a8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2220      	movs	r2, #32
 80023b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023b2:	183b      	adds	r3, r7, r0
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b21      	cmp	r3, #33	@ 0x21
 80023b8:	d003      	beq.n	80023c2 <I2C_ITSlaveCplt+0x3a>
 80023ba:	183b      	adds	r3, r7, r0
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b29      	cmp	r3, #41	@ 0x29
 80023c0:	d109      	bne.n	80023d6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023c2:	4a7b      	ldr	r2, [pc, #492]	@ (80025b0 <I2C_ITSlaveCplt+0x228>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fb89 	bl	8002ae0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2221      	movs	r2, #33	@ 0x21
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023d4:	e011      	b.n	80023fa <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023d6:	220f      	movs	r2, #15
 80023d8:	18bb      	adds	r3, r7, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b22      	cmp	r3, #34	@ 0x22
 80023de:	d003      	beq.n	80023e8 <I2C_ITSlaveCplt+0x60>
 80023e0:	18bb      	adds	r3, r7, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80023e6:	d108      	bne.n	80023fa <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023e8:	4a72      	ldr	r2, [pc, #456]	@ (80025b4 <I2C_ITSlaveCplt+0x22c>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0011      	movs	r1, r2
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fb76 	bl	8002ae0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2222      	movs	r2, #34	@ 0x22
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2180      	movs	r1, #128	@ 0x80
 8002406:	0209      	lsls	r1, r1, #8
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4968      	ldr	r1, [pc, #416]	@ (80025b8 <I2C_ITSlaveCplt+0x230>)
 8002418:	400a      	ands	r2, r1
 800241a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 fa55 	bl	80028ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	01db      	lsls	r3, r3, #7
 800242a:	4013      	ands	r3, r2
 800242c:	d013      	beq.n	8002456 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4960      	ldr	r1, [pc, #384]	@ (80025bc <I2C_ITSlaveCplt+0x234>)
 800243a:	400a      	ands	r2, r1
 800243c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01f      	beq.n	8002486 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002454:	e017      	b.n	8002486 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	4013      	ands	r3, r2
 800245e:	d012      	beq.n	8002486 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4955      	ldr	r1, [pc, #340]	@ (80025c0 <I2C_ITSlaveCplt+0x238>)
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	d020      	beq.n	80024d0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2204      	movs	r2, #4
 8002492:	4393      	bics	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	2204      	movs	r2, #4
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2242      	movs	r2, #66	@ 0x42
 80024ea:	2100      	movs	r1, #0
 80024ec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	0011      	movs	r1, r2
 8002504:	0018      	movs	r0, r3
 8002506:	f000 f8b7 	bl	8002678 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2241      	movs	r2, #65	@ 0x41
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b28      	cmp	r3, #40	@ 0x28
 8002514:	d147      	bne.n	80025a6 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f000 f853 	bl	80025c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002522:	e040      	b.n	80025a6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <I2C_ITSlaveCplt+0x23c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d016      	beq.n	800255c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff fdf7 	bl	8002124 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a22      	ldr	r2, [pc, #136]	@ (80025c4 <I2C_ITSlaveCplt+0x23c>)
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2241      	movs	r2, #65	@ 0x41
 8002540:	2120      	movs	r1, #32
 8002542:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2240      	movs	r2, #64	@ 0x40
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff f8e0 	bl	800171a <HAL_I2C_ListenCpltCallback>
}
 800255a:	e024      	b.n	80025a6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2241      	movs	r2, #65	@ 0x41
 8002560:	5c9b      	ldrb	r3, [r3, r2]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b22      	cmp	r3, #34	@ 0x22
 8002566:	d10f      	bne.n	8002588 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2241      	movs	r2, #65	@ 0x41
 800256c:	2120      	movs	r1, #32
 800256e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2240      	movs	r2, #64	@ 0x40
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f7fe f8e5 	bl	8000750 <HAL_I2C_SlaveRxCpltCallback>
}
 8002586:	e00e      	b.n	80025a6 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2241      	movs	r2, #65	@ 0x41
 800258c:	2120      	movs	r1, #32
 800258e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2240      	movs	r2, #64	@ 0x40
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7ff f8b2 	bl	800170a <HAL_I2C_SlaveTxCpltCallback>
}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b006      	add	sp, #24
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	00008001 	.word	0x00008001
 80025b4:	00008002 	.word	0x00008002
 80025b8:	fe00e800 	.word	0xfe00e800
 80025bc:	ffffbfff 	.word	0xffffbfff
 80025c0:	ffff7fff 	.word	0xffff7fff
 80025c4:	ffff0000 	.word	0xffff0000

080025c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a26      	ldr	r2, [pc, #152]	@ (8002670 <I2C_ITListenCplt+0xa8>)
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2241      	movs	r2, #65	@ 0x41
 80025e2:	2120      	movs	r1, #32
 80025e4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2242      	movs	r2, #66	@ 0x42
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2204      	movs	r2, #4
 80025f8:	4013      	ands	r3, r2
 80025fa:	d022      	beq.n	8002642 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	2204      	movs	r2, #4
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002642:	4a0c      	ldr	r2, [pc, #48]	@ (8002674 <I2C_ITListenCplt+0xac>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0011      	movs	r1, r2
 8002648:	0018      	movs	r0, r3
 800264a:	f000 fa49 	bl	8002ae0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2210      	movs	r2, #16
 8002654:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2240      	movs	r2, #64	@ 0x40
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff f85a 	bl	800171a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	ffff0000 	.word	0xffff0000
 8002674:	00008003 	.word	0x00008003

08002678 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002682:	200f      	movs	r0, #15
 8002684:	183b      	adds	r3, r7, r0
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	2141      	movs	r1, #65	@ 0x41
 800268a:	5c52      	ldrb	r2, [r2, r1]
 800268c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2242      	movs	r2, #66	@ 0x42
 8002692:	2100      	movs	r1, #0
 8002694:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a72      	ldr	r2, [pc, #456]	@ (8002864 <I2C_ITError+0x1ec>)
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b28      	cmp	r3, #40	@ 0x28
 80026b4:	d007      	beq.n	80026c6 <I2C_ITError+0x4e>
 80026b6:	183b      	adds	r3, r7, r0
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b29      	cmp	r3, #41	@ 0x29
 80026bc:	d003      	beq.n	80026c6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80026be:	183b      	adds	r3, r7, r0
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80026c4:	d10c      	bne.n	80026e0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2103      	movs	r1, #3
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fa08 	bl	8002ae0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2241      	movs	r2, #65	@ 0x41
 80026d4:	2128      	movs	r1, #40	@ 0x28
 80026d6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a63      	ldr	r2, [pc, #396]	@ (8002868 <I2C_ITError+0x1f0>)
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80026de:	e032      	b.n	8002746 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026e0:	4a62      	ldr	r2, [pc, #392]	@ (800286c <I2C_ITError+0x1f4>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0011      	movs	r1, r2
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f9fa 	bl	8002ae0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 f8ed 	bl	80028ce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2241      	movs	r2, #65	@ 0x41
 80026f8:	5c9b      	ldrb	r3, [r3, r2]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b60      	cmp	r3, #96	@ 0x60
 80026fe:	d01f      	beq.n	8002740 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2241      	movs	r2, #65	@ 0x41
 8002704:	2120      	movs	r1, #32
 8002706:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2220      	movs	r2, #32
 8002710:	4013      	ands	r3, r2
 8002712:	2b20      	cmp	r3, #32
 8002714:	d114      	bne.n	8002740 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2210      	movs	r2, #16
 800271e:	4013      	ands	r3, r2
 8002720:	2b10      	cmp	r3, #16
 8002722:	d109      	bne.n	8002738 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2210      	movs	r2, #16
 800272a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	2204      	movs	r2, #4
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03b      	beq.n	80027cc <I2C_ITError+0x154>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b11      	cmp	r3, #17
 8002758:	d002      	beq.n	8002760 <I2C_ITError+0xe8>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b21      	cmp	r3, #33	@ 0x21
 800275e:	d135      	bne.n	80027cc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	01db      	lsls	r3, r3, #7
 800276a:	401a      	ands	r2, r3
 800276c:	2380      	movs	r3, #128	@ 0x80
 800276e:	01db      	lsls	r3, r3, #7
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	493c      	ldr	r1, [pc, #240]	@ (8002870 <I2C_ITError+0x1f8>)
 8002780:	400a      	ands	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	0018      	movs	r0, r3
 800278a:	f7fe fc84 	bl	8001096 <HAL_DMA_GetState>
 800278e:	0003      	movs	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d016      	beq.n	80027c2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	4a36      	ldr	r2, [pc, #216]	@ (8002874 <I2C_ITError+0x1fc>)
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2240      	movs	r2, #64	@ 0x40
 80027a0:	2100      	movs	r1, #0
 80027a2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7fe fc2d 	bl	8001008 <HAL_DMA_Abort_IT>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d051      	beq.n	8002856 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	0018      	movs	r0, r3
 80027be:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027c0:	e049      	b.n	8002856 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f859 	bl	800287c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027ca:	e044      	b.n	8002856 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d03b      	beq.n	800284c <I2C_ITError+0x1d4>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b12      	cmp	r3, #18
 80027d8:	d002      	beq.n	80027e0 <I2C_ITError+0x168>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b22      	cmp	r3, #34	@ 0x22
 80027de:	d135      	bne.n	800284c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	401a      	ands	r2, r3
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	491e      	ldr	r1, [pc, #120]	@ (8002878 <I2C_ITError+0x200>)
 8002800:	400a      	ands	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002808:	0018      	movs	r0, r3
 800280a:	f7fe fc44 	bl	8001096 <HAL_DMA_GetState>
 800280e:	0003      	movs	r3, r0
 8002810:	2b01      	cmp	r3, #1
 8002812:	d016      	beq.n	8002842 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002818:	4a16      	ldr	r2, [pc, #88]	@ (8002874 <I2C_ITError+0x1fc>)
 800281a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	2100      	movs	r1, #0
 8002822:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002828:	0018      	movs	r0, r3
 800282a:	f7fe fbed 	bl	8001008 <HAL_DMA_Abort_IT>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d013      	beq.n	800285a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	0018      	movs	r0, r3
 800283e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002840:	e00b      	b.n	800285a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f000 f819 	bl	800287c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800284a:	e006      	b.n	800285a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 f814 	bl	800287c <I2C_TreatErrorCallback>
  }
}
 8002854:	e002      	b.n	800285c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	e000      	b.n	800285c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800285a:	46c0      	nop			@ (mov r8, r8)
}
 800285c:	46c0      	nop			@ (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b004      	add	sp, #16
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffff0000 	.word	0xffff0000
 8002868:	0800175d 	.word	0x0800175d
 800286c:	00008003 	.word	0x00008003
 8002870:	ffffbfff 	.word	0xffffbfff
 8002874:	08002913 	.word	0x08002913
 8002878:	ffff7fff 	.word	0xffff7fff

0800287c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2241      	movs	r2, #65	@ 0x41
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b60      	cmp	r3, #96	@ 0x60
 800288e:	d10f      	bne.n	80028b0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2241      	movs	r2, #65	@ 0x41
 8002894:	2120      	movs	r1, #32
 8002896:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2240      	movs	r2, #64	@ 0x40
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fe ff4e 	bl	800174a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028ae:	e00a      	b.n	80028c6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2240      	movs	r2, #64	@ 0x40
 80028ba:	2100      	movs	r1, #0
 80028bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7fd ff77 	bl	80007b4 <HAL_I2C_ErrorCallback>
}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b002      	add	sp, #8
 80028cc:	bd80      	pop	{r7, pc}

080028ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d103      	bne.n	80028ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d007      	beq.n	800290a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	619a      	str	r2, [r3, #24]
  }
}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}

08002912 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292c:	2200      	movs	r2, #0
 800292e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	2200      	movs	r2, #0
 800293e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff ff9a 	bl	800287c <I2C_TreatErrorCallback>
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b004      	add	sp, #16
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	0008      	movs	r0, r1
 800295a:	0011      	movs	r1, r2
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	240a      	movs	r4, #10
 8002960:	193b      	adds	r3, r7, r4
 8002962:	1c02      	adds	r2, r0, #0
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	2009      	movs	r0, #9
 8002968:	183b      	adds	r3, r7, r0
 800296a:	1c0a      	adds	r2, r1, #0
 800296c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800296e:	193b      	adds	r3, r7, r4
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	059b      	lsls	r3, r3, #22
 8002974:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002976:	183b      	adds	r3, r7, r0
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	0419      	lsls	r1, r3, #16
 800297c:	23ff      	movs	r3, #255	@ 0xff
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002982:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298a:	4313      	orrs	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800299a:	0d51      	lsrs	r1, r2, #21
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	00d2      	lsls	r2, r2, #3
 80029a0:	400a      	ands	r2, r1
 80029a2:	4907      	ldr	r1, [pc, #28]	@ (80029c0 <I2C_TransferConfig+0x70>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	43d2      	mvns	r2, r2
 80029a8:	401a      	ands	r2, r3
 80029aa:	0011      	movs	r1, r2
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b007      	add	sp, #28
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	03ff63ff 	.word	0x03ff63ff

080029c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	000a      	movs	r2, r1
 80029ce:	1cbb      	adds	r3, r7, #2
 80029d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029da:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad4 <I2C_Enable_IRQ+0x110>)
 80029dc:	429a      	cmp	r2, r3
 80029de:	d035      	beq.n	8002a4c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80029e4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad8 <I2C_Enable_IRQ+0x114>)
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d030      	beq.n	8002a4c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80029ee:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <I2C_Enable_IRQ+0x118>)
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d02b      	beq.n	8002a4c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80029f4:	1cbb      	adds	r3, r7, #2
 80029f6:	2200      	movs	r2, #0
 80029f8:	5e9b      	ldrsh	r3, [r3, r2]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	da03      	bge.n	8002a06 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	22b8      	movs	r2, #184	@ 0xb8
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002a06:	1cbb      	adds	r3, r7, #2
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	22f2      	movs	r2, #242	@ 0xf2
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a18:	1cbb      	adds	r3, r7, #2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d003      	beq.n	8002a2a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22f4      	movs	r2, #244	@ 0xf4
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a2a:	1cbb      	adds	r3, r7, #2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d103      	bne.n	8002a3a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2290      	movs	r2, #144	@ 0x90
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a3a:	1cbb      	adds	r3, r7, #2
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d13c      	bne.n	8002abc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a4a:	e037      	b.n	8002abc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a4c:	1cbb      	adds	r3, r7, #2
 8002a4e:	2200      	movs	r2, #0
 8002a50:	5e9b      	ldrsh	r3, [r3, r2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da03      	bge.n	8002a5e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	22b8      	movs	r2, #184	@ 0xb8
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002a5e:	1cbb      	adds	r3, r7, #2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d003      	beq.n	8002a70 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	22f2      	movs	r2, #242	@ 0xf2
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a70:	1cbb      	adds	r3, r7, #2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	d003      	beq.n	8002a82 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22f4      	movs	r2, #244	@ 0xf4
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a82:	1cbb      	adds	r3, r7, #2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d103      	bne.n	8002a92 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2290      	movs	r2, #144	@ 0x90
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a92:	1cbb      	adds	r3, r7, #2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d103      	bne.n	8002aa2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2260      	movs	r2, #96	@ 0x60
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <I2C_Enable_IRQ+0x118>)
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d007      	beq.n	8002abc <I2C_Enable_IRQ+0xf8>
 8002aac:	1cbb      	adds	r3, r7, #2
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b40      	cmp	r3, #64	@ 0x40
 8002ab2:	d103      	bne.n	8002abc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
}
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b004      	add	sp, #16
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	0800195d 	.word	0x0800195d
 8002ad8:	08001d8d 	.word	0x08001d8d
 8002adc:	08001b55 	.word	0x08001b55

08002ae0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	000a      	movs	r2, r1
 8002aea:	1cbb      	adds	r3, r7, #2
 8002aec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002af2:	1cbb      	adds	r3, r7, #2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	2201      	movs	r2, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	d010      	beq.n	8002b1e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2242      	movs	r2, #66	@ 0x42
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2241      	movs	r2, #65	@ 0x41
 8002b08:	5c9b      	ldrb	r3, [r3, r2]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	2328      	movs	r3, #40	@ 0x28
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b28      	cmp	r3, #40	@ 0x28
 8002b14:	d003      	beq.n	8002b1e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	22b0      	movs	r2, #176	@ 0xb0
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002b1e:	1cbb      	adds	r3, r7, #2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	d010      	beq.n	8002b4a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2244      	movs	r2, #68	@ 0x44
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2241      	movs	r2, #65	@ 0x41
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	001a      	movs	r2, r3
 8002b3a:	2328      	movs	r3, #40	@ 0x28
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b28      	cmp	r3, #40	@ 0x28
 8002b40:	d003      	beq.n	8002b4a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	22b0      	movs	r2, #176	@ 0xb0
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b4a:	1cbb      	adds	r3, r7, #2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	5e9b      	ldrsh	r3, [r3, r2]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	da03      	bge.n	8002b5c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	22b8      	movs	r2, #184	@ 0xb8
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002b5c:	1cbb      	adds	r3, r7, #2
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d103      	bne.n	8002b6c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2290      	movs	r2, #144	@ 0x90
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002b6c:	1cbb      	adds	r3, r7, #2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d103      	bne.n	8002b7c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002b7c:	1cbb      	adds	r3, r7, #2
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	2b40      	cmp	r3, #64	@ 0x40
 8002b82:	d103      	bne.n	8002b8c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2240      	movs	r2, #64	@ 0x40
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43d9      	mvns	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2241      	movs	r2, #65	@ 0x41
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d138      	bne.n	8002c30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2240      	movs	r2, #64	@ 0x40
 8002bc2:	5c9b      	ldrb	r3, [r3, r2]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e032      	b.n	8002c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	@ 0x40
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2241      	movs	r2, #65	@ 0x41
 8002bd8:	2124      	movs	r1, #36	@ 0x24
 8002bda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	438a      	bics	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4911      	ldr	r1, [pc, #68]	@ (8002c3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2241      	movs	r2, #65	@ 0x41
 8002c20:	2120      	movs	r1, #32
 8002c22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2240      	movs	r2, #64	@ 0x40
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b002      	add	sp, #8
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	ffffefff 	.word	0xffffefff

08002c40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2241      	movs	r2, #65	@ 0x41
 8002c4e:	5c9b      	ldrb	r3, [r3, r2]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d139      	bne.n	8002cca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2240      	movs	r2, #64	@ 0x40
 8002c5a:	5c9b      	ldrb	r3, [r3, r2]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e033      	b.n	8002ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2240      	movs	r2, #64	@ 0x40
 8002c68:	2101      	movs	r1, #1
 8002c6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2241      	movs	r2, #65	@ 0x41
 8002c70:	2124      	movs	r1, #36	@ 0x24
 8002c72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	438a      	bics	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a11      	ldr	r2, [pc, #68]	@ (8002cd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2241      	movs	r2, #65	@ 0x41
 8002cba:	2120      	movs	r1, #32
 8002cbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2240      	movs	r2, #64	@ 0x40
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	fffff0ff 	.word	0xfffff0ff

08002cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f000 fbbf 	bl	800346a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cec:	4bc9      	ldr	r3, [pc, #804]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf6:	4bc7      	ldr	r3, [pc, #796]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	025b      	lsls	r3, r3, #9
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <HAL_RCC_OscConfig+0x36>
 8002d0c:	e07e      	b.n	8002e0c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d007      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d112      	bne.n	8002d40 <HAL_RCC_OscConfig+0x68>
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	025b      	lsls	r3, r3, #9
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	4bbb      	ldr	r3, [pc, #748]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2380      	movs	r3, #128	@ 0x80
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d100      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5a>
 8002d30:	e06b      	b.n	8002e0a <HAL_RCC_OscConfig+0x132>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d167      	bne.n	8002e0a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f000 fb95 	bl	800346a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	025b      	lsls	r3, r3, #9
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x84>
 8002d4c:	4bb1      	ldr	r3, [pc, #708]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4bb0      	ldr	r3, [pc, #704]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d52:	2180      	movs	r1, #128	@ 0x80
 8002d54:	0249      	lsls	r1, r1, #9
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e027      	b.n	8002dac <HAL_RCC_OscConfig+0xd4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	23a0      	movs	r3, #160	@ 0xa0
 8002d62:	02db      	lsls	r3, r3, #11
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10e      	bne.n	8002d86 <HAL_RCC_OscConfig+0xae>
 8002d68:	4baa      	ldr	r3, [pc, #680]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4ba9      	ldr	r3, [pc, #676]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d6e:	2180      	movs	r1, #128	@ 0x80
 8002d70:	02c9      	lsls	r1, r1, #11
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	4ba7      	ldr	r3, [pc, #668]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4ba6      	ldr	r3, [pc, #664]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	0249      	lsls	r1, r1, #9
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e012      	b.n	8002dac <HAL_RCC_OscConfig+0xd4>
 8002d86:	4ba3      	ldr	r3, [pc, #652]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4ba2      	ldr	r3, [pc, #648]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d8c:	49a2      	ldr	r1, [pc, #648]	@ (8003018 <HAL_RCC_OscConfig+0x340>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	4ba0      	ldr	r3, [pc, #640]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	025b      	lsls	r3, r3, #9
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4b9c      	ldr	r3, [pc, #624]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b9b      	ldr	r3, [pc, #620]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002da6:	499d      	ldr	r1, [pc, #628]	@ (800301c <HAL_RCC_OscConfig+0x344>)
 8002da8:	400a      	ands	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d015      	beq.n	8002de0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f840 	bl	8000e38 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbe:	f7fe f83b 	bl	8000e38 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	@ 0x64
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f000 fb4c 	bl	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd2:	4b90      	ldr	r3, [pc, #576]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	029b      	lsls	r3, r3, #10
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d0ef      	beq.n	8002dbe <HAL_RCC_OscConfig+0xe6>
 8002dde:	e015      	b.n	8002e0c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f82a 	bl	8000e38 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dea:	f7fe f825 	bl	8000e38 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	@ 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e336      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dfc:	4b85      	ldr	r3, [pc, #532]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	029b      	lsls	r3, r3, #10
 8002e04:	4013      	ands	r3, r2
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x112>
 8002e08:	e000      	b.n	8002e0c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d100      	bne.n	8002e18 <HAL_RCC_OscConfig+0x140>
 8002e16:	e099      	b.n	8002f4c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	2220      	movs	r2, #32
 8002e22:	4013      	ands	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002e26:	4b7b      	ldr	r3, [pc, #492]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	2220      	movs	r2, #32
 8002e36:	4393      	bics	r3, r2
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d13e      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d13b      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e4c:	4b71      	ldr	r3, [pc, #452]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2204      	movs	r2, #4
 8002e52:	4013      	ands	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_RCC_OscConfig+0x188>
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e304      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b6c      	ldr	r3, [pc, #432]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a6e      	ldr	r2, [pc, #440]	@ (8003020 <HAL_RCC_OscConfig+0x348>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	021a      	lsls	r2, r3, #8
 8002e70:	4b68      	ldr	r3, [pc, #416]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e76:	4b67      	ldr	r3, [pc, #412]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2209      	movs	r2, #9
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	4b64      	ldr	r3, [pc, #400]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e88:	f000 fc42 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8002e8c:	0001      	movs	r1, r0
 8002e8e:	4b61      	ldr	r3, [pc, #388]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	220f      	movs	r2, #15
 8002e96:	4013      	ands	r3, r2
 8002e98:	4a62      	ldr	r2, [pc, #392]	@ (8003024 <HAL_RCC_OscConfig+0x34c>)
 8002e9a:	5cd3      	ldrb	r3, [r2, r3]
 8002e9c:	000a      	movs	r2, r1
 8002e9e:	40da      	lsrs	r2, r3
 8002ea0:	4b61      	ldr	r3, [pc, #388]	@ (8003028 <HAL_RCC_OscConfig+0x350>)
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002ea4:	4b61      	ldr	r3, [pc, #388]	@ (800302c <HAL_RCC_OscConfig+0x354>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2513      	movs	r5, #19
 8002eaa:	197c      	adds	r4, r7, r5
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7fd ff7d 	bl	8000dac <HAL_InitTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002eb6:	197b      	adds	r3, r7, r5
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d046      	beq.n	8002f4c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002ebe:	197b      	adds	r3, r7, r5
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	e2d2      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d027      	beq.n	8002f1a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002eca:	4b52      	ldr	r3, [pc, #328]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2209      	movs	r2, #9
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fd ffac 	bl	8000e38 <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fd ffa7 	bl	8000e38 <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e2b8      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef8:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	d0f1      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b44      	ldr	r3, [pc, #272]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a46      	ldr	r2, [pc, #280]	@ (8003020 <HAL_RCC_OscConfig+0x348>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	438a      	bics	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fd ff87 	bl	8000e38 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fd ff82 	bl	8000e38 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e293      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2204      	movs	r2, #4
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d1f1      	bne.n	8002f30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2210      	movs	r2, #16
 8002f52:	4013      	ands	r3, r2
 8002f54:	d100      	bne.n	8002f58 <HAL_RCC_OscConfig+0x280>
 8002f56:	e0a2      	b.n	800309e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d140      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4013      	ands	r3, r2
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x29e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e279      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f76:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003030 <HAL_RCC_OscConfig+0x358>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f84:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8a:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	0a19      	lsrs	r1, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	061a      	lsls	r2, r3, #24
 8002f98:	4b1e      	ldr	r3, [pc, #120]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	0b5b      	lsrs	r3, r3, #13
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	2280      	movs	r2, #128	@ 0x80
 8002fa8:	0212      	lsls	r2, r2, #8
 8002faa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002fac:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	491b      	ldr	r1, [pc, #108]	@ (8003024 <HAL_RCC_OscConfig+0x34c>)
 8002fb8:	5ccb      	ldrb	r3, [r1, r3]
 8002fba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <HAL_RCC_OscConfig+0x350>)
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_RCC_OscConfig+0x354>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2513      	movs	r5, #19
 8002fc6:	197c      	adds	r4, r7, r5
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd feef 	bl	8000dac <HAL_InitTick>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002fd2:	197b      	adds	r3, r7, r5
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d061      	beq.n	800309e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002fda:	197b      	adds	r3, r7, r5
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	e244      	b.n	800346a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d040      	beq.n	800306a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <HAL_RCC_OscConfig+0x33c>)
 8002fee:	2180      	movs	r1, #128	@ 0x80
 8002ff0:	0049      	lsls	r1, r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fd ff1f 	bl	8000e38 <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ffe:	e019      	b.n	8003034 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003000:	f7fd ff1a 	bl	8000e38 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d912      	bls.n	8003034 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e22b      	b.n	800346a <HAL_RCC_OscConfig+0x792>
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	40021000 	.word	0x40021000
 8003018:	fffeffff 	.word	0xfffeffff
 800301c:	fffbffff 	.word	0xfffbffff
 8003020:	ffffe0ff 	.word	0xffffe0ff
 8003024:	08004314 	.word	0x08004314
 8003028:	20000000 	.word	0x20000000
 800302c:	20000004 	.word	0x20000004
 8003030:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003034:	4bca      	ldr	r3, [pc, #808]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d0df      	beq.n	8003000 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003040:	4bc7      	ldr	r3, [pc, #796]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4ac7      	ldr	r2, [pc, #796]	@ (8003364 <HAL_RCC_OscConfig+0x68c>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800304e:	4bc4      	ldr	r3, [pc, #784]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003054:	4bc2      	ldr	r3, [pc, #776]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	0a19      	lsrs	r1, r3, #8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	061a      	lsls	r2, r3, #24
 8003062:	4bbf      	ldr	r3, [pc, #764]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	e019      	b.n	800309e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800306a:	4bbd      	ldr	r3, [pc, #756]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4bbc      	ldr	r3, [pc, #752]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003070:	49bd      	ldr	r1, [pc, #756]	@ (8003368 <HAL_RCC_OscConfig+0x690>)
 8003072:	400a      	ands	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fd fedf 	bl	8000e38 <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003080:	f7fd feda 	bl	8000e38 <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1eb      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003092:	4bb3      	ldr	r3, [pc, #716]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2208      	movs	r2, #8
 80030a4:	4013      	ands	r3, r2
 80030a6:	d036      	beq.n	8003116 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d019      	beq.n	80030e4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b0:	4bab      	ldr	r3, [pc, #684]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80030b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030b4:	4baa      	ldr	r3, [pc, #680]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7fd febc 	bl	8000e38 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fd feb7 	bl	8000e38 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1c8      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030d8:	4ba1      	ldr	r3, [pc, #644]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80030da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	d0f1      	beq.n	80030c6 <HAL_RCC_OscConfig+0x3ee>
 80030e2:	e018      	b.n	8003116 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80030e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f0:	f7fd fea2 	bl	8000e38 <HAL_GetTick>
 80030f4:	0003      	movs	r3, r0
 80030f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fd fe9d 	bl	8000e38 <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1ae      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800310c:	4b94      	ldr	r3, [pc, #592]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	2202      	movs	r2, #2
 8003112:	4013      	ands	r3, r2
 8003114:	d1f1      	bne.n	80030fa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2204      	movs	r2, #4
 800311c:	4013      	ands	r3, r2
 800311e:	d100      	bne.n	8003122 <HAL_RCC_OscConfig+0x44a>
 8003120:	e0ae      	b.n	8003280 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2023      	movs	r0, #35	@ 0x23
 8003124:	183b      	adds	r3, r7, r0
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b8d      	ldr	r3, [pc, #564]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800312c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	055b      	lsls	r3, r3, #21
 8003132:	4013      	ands	r3, r2
 8003134:	d109      	bne.n	800314a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4b8a      	ldr	r3, [pc, #552]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800313a:	4b89      	ldr	r3, [pc, #548]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800313c:	2180      	movs	r1, #128	@ 0x80
 800313e:	0549      	lsls	r1, r1, #21
 8003140:	430a      	orrs	r2, r1
 8003142:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003144:	183b      	adds	r3, r7, r0
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b88      	ldr	r3, [pc, #544]	@ (800336c <HAL_RCC_OscConfig+0x694>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4013      	ands	r3, r2
 8003154:	d11a      	bne.n	800318c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b85      	ldr	r3, [pc, #532]	@ (800336c <HAL_RCC_OscConfig+0x694>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b84      	ldr	r3, [pc, #528]	@ (800336c <HAL_RCC_OscConfig+0x694>)
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	0049      	lsls	r1, r1, #1
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003164:	f7fd fe68 	bl	8000e38 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fd fe63 	bl	8000e38 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b64      	cmp	r3, #100	@ 0x64
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e174      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <HAL_RCC_OscConfig+0x694>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4013      	ands	r3, r2
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	429a      	cmp	r2, r3
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4d0>
 8003198:	4b71      	ldr	r3, [pc, #452]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800319a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800319c:	4b70      	ldr	r3, [pc, #448]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800319e:	2180      	movs	r1, #128	@ 0x80
 80031a0:	0049      	lsls	r1, r1, #1
 80031a2:	430a      	orrs	r2, r1
 80031a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80031a6:	e031      	b.n	800320c <HAL_RCC_OscConfig+0x534>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10c      	bne.n	80031ca <HAL_RCC_OscConfig+0x4f2>
 80031b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031b6:	496c      	ldr	r1, [pc, #432]	@ (8003368 <HAL_RCC_OscConfig+0x690>)
 80031b8:	400a      	ands	r2, r1
 80031ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80031bc:	4b68      	ldr	r3, [pc, #416]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031c0:	4b67      	ldr	r3, [pc, #412]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031c2:	496b      	ldr	r1, [pc, #428]	@ (8003370 <HAL_RCC_OscConfig+0x698>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031c8:	e020      	b.n	800320c <HAL_RCC_OscConfig+0x534>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	23a0      	movs	r3, #160	@ 0xa0
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10e      	bne.n	80031f4 <HAL_RCC_OscConfig+0x51c>
 80031d6:	4b62      	ldr	r3, [pc, #392]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031da:	4b61      	ldr	r3, [pc, #388]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031dc:	2180      	movs	r1, #128	@ 0x80
 80031de:	00c9      	lsls	r1, r1, #3
 80031e0:	430a      	orrs	r2, r1
 80031e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80031e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031ea:	2180      	movs	r1, #128	@ 0x80
 80031ec:	0049      	lsls	r1, r1, #1
 80031ee:	430a      	orrs	r2, r1
 80031f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0x534>
 80031f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031f8:	4b59      	ldr	r3, [pc, #356]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80031fa:	495b      	ldr	r1, [pc, #364]	@ (8003368 <HAL_RCC_OscConfig+0x690>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003200:	4b57      	ldr	r3, [pc, #348]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003202:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003204:	4b56      	ldr	r3, [pc, #344]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003206:	495a      	ldr	r1, [pc, #360]	@ (8003370 <HAL_RCC_OscConfig+0x698>)
 8003208:	400a      	ands	r2, r1
 800320a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fd fe10 	bl	8000e38 <HAL_GetTick>
 8003218:	0003      	movs	r3, r0
 800321a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800321c:	e009      	b.n	8003232 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fd fe0b 	bl	8000e38 <HAL_GetTick>
 8003222:	0002      	movs	r2, r0
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	4a52      	ldr	r2, [pc, #328]	@ (8003374 <HAL_RCC_OscConfig+0x69c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e11b      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003232:	4b4b      	ldr	r3, [pc, #300]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d0ef      	beq.n	800321e <HAL_RCC_OscConfig+0x546>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003240:	f7fd fdfa 	bl	8000e38 <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003248:	e009      	b.n	800325e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fdf5 	bl	8000e38 <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	4a47      	ldr	r2, [pc, #284]	@ (8003374 <HAL_RCC_OscConfig+0x69c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e105      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800325e:	4b40      	ldr	r3, [pc, #256]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003260:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d1ef      	bne.n	800324a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800326a:	2323      	movs	r3, #35	@ 0x23
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003274:	4b3a      	ldr	r3, [pc, #232]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800327a:	493f      	ldr	r1, [pc, #252]	@ (8003378 <HAL_RCC_OscConfig+0x6a0>)
 800327c:	400a      	ands	r2, r1
 800327e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2220      	movs	r2, #32
 8003286:	4013      	ands	r3, r2
 8003288:	d049      	beq.n	800331e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d026      	beq.n	80032e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003292:	4b33      	ldr	r3, [pc, #204]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	4b32      	ldr	r3, [pc, #200]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003298:	2101      	movs	r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80032a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80032aa:	4b34      	ldr	r3, [pc, #208]	@ (800337c <HAL_RCC_OscConfig+0x6a4>)
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	4b33      	ldr	r3, [pc, #204]	@ (800337c <HAL_RCC_OscConfig+0x6a4>)
 80032b0:	2180      	movs	r1, #128	@ 0x80
 80032b2:	0189      	lsls	r1, r1, #6
 80032b4:	430a      	orrs	r2, r1
 80032b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd fdbe 	bl	8000e38 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c2:	f7fd fdb9 	bl	8000e38 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0ca      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032d4:	4b22      	ldr	r3, [pc, #136]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2202      	movs	r2, #2
 80032da:	4013      	ands	r3, r2
 80032dc:	d0f1      	beq.n	80032c2 <HAL_RCC_OscConfig+0x5ea>
 80032de:	e01e      	b.n	800331e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80032e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	438a      	bics	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	4b23      	ldr	r3, [pc, #140]	@ (800337c <HAL_RCC_OscConfig+0x6a4>)
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	4b22      	ldr	r3, [pc, #136]	@ (800337c <HAL_RCC_OscConfig+0x6a4>)
 80032f2:	4923      	ldr	r1, [pc, #140]	@ (8003380 <HAL_RCC_OscConfig+0x6a8>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fd9e 	bl	8000e38 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003302:	f7fd fd99 	bl	8000e38 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0aa      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003314:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d1f1      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d100      	bne.n	8003328 <HAL_RCC_OscConfig+0x650>
 8003326:	e09f      	b.n	8003468 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d100      	bne.n	8003330 <HAL_RCC_OscConfig+0x658>
 800332e:	e078      	b.n	8003422 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	2b02      	cmp	r3, #2
 8003336:	d159      	bne.n	80033ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b08      	ldr	r3, [pc, #32]	@ (8003360 <HAL_RCC_OscConfig+0x688>)
 800333e:	4911      	ldr	r1, [pc, #68]	@ (8003384 <HAL_RCC_OscConfig+0x6ac>)
 8003340:	400a      	ands	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fd fd78 	bl	8000e38 <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800334c:	e01c      	b.n	8003388 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fd fd73 	bl	8000e38 <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d915      	bls.n	8003388 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e084      	b.n	800346a <HAL_RCC_OscConfig+0x792>
 8003360:	40021000 	.word	0x40021000
 8003364:	ffff1fff 	.word	0xffff1fff
 8003368:	fffffeff 	.word	0xfffffeff
 800336c:	40007000 	.word	0x40007000
 8003370:	fffffbff 	.word	0xfffffbff
 8003374:	00001388 	.word	0x00001388
 8003378:	efffffff 	.word	0xefffffff
 800337c:	40010000 	.word	0x40010000
 8003380:	ffffdfff 	.word	0xffffdfff
 8003384:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003388:	4b3a      	ldr	r3, [pc, #232]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	049b      	lsls	r3, r3, #18
 8003390:	4013      	ands	r3, r2
 8003392:	d1dc      	bne.n	800334e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003394:	4b37      	ldr	r3, [pc, #220]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a37      	ldr	r2, [pc, #220]	@ (8003478 <HAL_RCC_OscConfig+0x7a0>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ac:	431a      	orrs	r2, r3
 80033ae:	4b31      	ldr	r3, [pc, #196]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 80033ba:	2180      	movs	r1, #128	@ 0x80
 80033bc:	0449      	lsls	r1, r1, #17
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fd fd39 	bl	8000e38 <HAL_GetTick>
 80033c6:	0003      	movs	r3, r0
 80033c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fd fd34 	bl	8000e38 <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e045      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033de:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	049b      	lsls	r3, r3, #18
 80033e6:	4013      	ands	r3, r2
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x6f4>
 80033ea:	e03d      	b.n	8003468 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b21      	ldr	r3, [pc, #132]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b20      	ldr	r3, [pc, #128]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 80033f2:	4922      	ldr	r1, [pc, #136]	@ (800347c <HAL_RCC_OscConfig+0x7a4>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd fd1e 	bl	8000e38 <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003402:	f7fd fd19 	bl	8000e38 <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e02a      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003414:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	049b      	lsls	r3, r3, #18
 800341c:	4013      	ands	r3, r2
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x72a>
 8003420:	e022      	b.n	8003468 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e01d      	b.n	800346a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800342e:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_RCC_OscConfig+0x79c>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	025b      	lsls	r3, r3, #9
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	429a      	cmp	r2, r3
 8003442:	d10f      	bne.n	8003464 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	23f0      	movs	r3, #240	@ 0xf0
 8003448:	039b      	lsls	r3, r3, #14
 800344a:	401a      	ands	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d107      	bne.n	8003464 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	23c0      	movs	r3, #192	@ 0xc0
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	401a      	ands	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b00a      	add	sp, #40	@ 0x28
 8003470:	bdb0      	pop	{r4, r5, r7, pc}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	40021000 	.word	0x40021000
 8003478:	ff02ffff 	.word	0xff02ffff
 800347c:	feffffff 	.word	0xfeffffff

08003480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e128      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003494:	4b96      	ldr	r3, [pc, #600]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d91e      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b93      	ldr	r3, [pc, #588]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2201      	movs	r2, #1
 80034a8:	4393      	bics	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	4b90      	ldr	r3, [pc, #576]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034b4:	f7fd fcc0 	bl	8000e38 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034bc:	e009      	b.n	80034d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034be:	f7fd fcbb 	bl	8000e38 <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	4a8a      	ldr	r2, [pc, #552]	@ (80036f4 <HAL_RCC_ClockConfig+0x274>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e109      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b87      	ldr	r3, [pc, #540]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4013      	ands	r3, r2
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1ee      	bne.n	80034be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2202      	movs	r2, #2
 80034e6:	4013      	ands	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ea:	4b83      	ldr	r3, [pc, #524]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	22f0      	movs	r2, #240	@ 0xf0
 80034f0:	4393      	bics	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b7f      	ldr	r3, [pc, #508]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	4013      	ands	r3, r2
 8003506:	d100      	bne.n	800350a <HAL_RCC_ClockConfig+0x8a>
 8003508:	e089      	b.n	800361e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003512:	4b79      	ldr	r3, [pc, #484]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	4013      	ands	r3, r2
 800351c:	d120      	bne.n	8003560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0e1      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800352a:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	049b      	lsls	r3, r3, #18
 8003532:	4013      	ands	r3, r2
 8003534:	d114      	bne.n	8003560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0d5      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d106      	bne.n	8003550 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003542:	4b6d      	ldr	r3, [pc, #436]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2204      	movs	r2, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d109      	bne.n	8003560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0ca      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003550:	4b69      	ldr	r3, [pc, #420]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2380      	movs	r3, #128	@ 0x80
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4013      	ands	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0c2      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003560:	4b65      	ldr	r3, [pc, #404]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2203      	movs	r2, #3
 8003566:	4393      	bics	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4b62      	ldr	r3, [pc, #392]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fd fc60 	bl	8000e38 <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d111      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003584:	e009      	b.n	800359a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003586:	f7fd fc57 	bl	8000e38 <HAL_GetTick>
 800358a:	0002      	movs	r2, r0
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <HAL_RCC_ClockConfig+0x274>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e0a5      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800359a:	4b57      	ldr	r3, [pc, #348]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	220c      	movs	r2, #12
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d1ef      	bne.n	8003586 <HAL_RCC_ClockConfig+0x106>
 80035a6:	e03a      	b.n	800361e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d111      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b0:	e009      	b.n	80035c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b2:	f7fd fc41 	bl	8000e38 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	4a4d      	ldr	r2, [pc, #308]	@ (80036f4 <HAL_RCC_ClockConfig+0x274>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e08f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c6:	4b4c      	ldr	r3, [pc, #304]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	220c      	movs	r2, #12
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d1ef      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x132>
 80035d2:	e024      	b.n	800361e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d11b      	bne.n	8003614 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035dc:	e009      	b.n	80035f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7fd fc2b 	bl	8000e38 <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	4a42      	ldr	r2, [pc, #264]	@ (80036f4 <HAL_RCC_ClockConfig+0x274>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e079      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	220c      	movs	r2, #12
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d1ef      	bne.n	80035de <HAL_RCC_ClockConfig+0x15e>
 80035fe:	e00e      	b.n	800361e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fd fc1a 	bl	8000e38 <HAL_GetTick>
 8003604:	0002      	movs	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	4a3a      	ldr	r2, [pc, #232]	@ (80036f4 <HAL_RCC_ClockConfig+0x274>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e068      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003614:	4b38      	ldr	r3, [pc, #224]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	220c      	movs	r2, #12
 800361a:	4013      	ands	r3, r2
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361e:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	4013      	ands	r3, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d21e      	bcs.n	800366a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362c:	4b30      	ldr	r3, [pc, #192]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2201      	movs	r2, #1
 8003632:	4393      	bics	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	4b2e      	ldr	r3, [pc, #184]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800363e:	f7fd fbfb 	bl	8000e38 <HAL_GetTick>
 8003642:	0003      	movs	r3, r0
 8003644:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	e009      	b.n	800365c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fd fbf6 	bl	8000e38 <HAL_GetTick>
 800364c:	0002      	movs	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	4a28      	ldr	r2, [pc, #160]	@ (80036f4 <HAL_RCC_ClockConfig+0x274>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e044      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365c:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <HAL_RCC_ClockConfig+0x270>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2201      	movs	r2, #1
 8003662:	4013      	ands	r3, r2
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d1ee      	bne.n	8003648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2204      	movs	r2, #4
 8003670:	4013      	ands	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <HAL_RCC_ClockConfig+0x27c>)
 800367a:	4013      	ands	r3, r2
 800367c:	0019      	movs	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003684:	430a      	orrs	r2, r1
 8003686:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2208      	movs	r2, #8
 800368e:	4013      	ands	r3, r2
 8003690:	d00a      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003692:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <HAL_RCC_ClockConfig+0x280>)
 8003698:	4013      	ands	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00da      	lsls	r2, r3, #3
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036a8:	f000 f832 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036ac:	0001      	movs	r1, r0
 80036ae:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_RCC_ClockConfig+0x278>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	220f      	movs	r2, #15
 80036b6:	4013      	ands	r3, r2
 80036b8:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <HAL_RCC_ClockConfig+0x284>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	000a      	movs	r2, r1
 80036be:	40da      	lsrs	r2, r3
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <HAL_RCC_ClockConfig+0x288>)
 80036c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <HAL_RCC_ClockConfig+0x28c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	250b      	movs	r5, #11
 80036ca:	197c      	adds	r4, r7, r5
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fd fb6d 	bl	8000dac <HAL_InitTick>
 80036d2:	0003      	movs	r3, r0
 80036d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80036d6:	197b      	adds	r3, r7, r5
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80036de:	197b      	adds	r3, r7, r5
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bdb0      	pop	{r4, r5, r7, pc}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	40022000 	.word	0x40022000
 80036f4:	00001388 	.word	0x00001388
 80036f8:	40021000 	.word	0x40021000
 80036fc:	fffff8ff 	.word	0xfffff8ff
 8003700:	ffffc7ff 	.word	0xffffc7ff
 8003704:	08004314 	.word	0x08004314
 8003708:	20000000 	.word	0x20000000
 800370c:	20000004 	.word	0x20000004

08003710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b08e      	sub	sp, #56	@ 0x38
 8003714:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003716:	4b4c      	ldr	r3, [pc, #304]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x138>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800371c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800371e:	230c      	movs	r3, #12
 8003720:	4013      	ands	r3, r2
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d014      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x40>
 8003726:	d900      	bls.n	800372a <HAL_RCC_GetSysClockFreq+0x1a>
 8003728:	e07b      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x112>
 800372a:	2b04      	cmp	r3, #4
 800372c:	d002      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x24>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d00b      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x3a>
 8003732:	e076      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003734:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x138>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2210      	movs	r2, #16
 800373a:	4013      	ands	r3, r2
 800373c:	d002      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800373e:	4b43      	ldr	r3, [pc, #268]	@ (800384c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003742:	e07c      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003744:	4b42      	ldr	r3, [pc, #264]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x140>)
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003748:	e079      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374a:	4b42      	ldr	r3, [pc, #264]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x144>)
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800374e:	e076      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003752:	0c9a      	lsrs	r2, r3, #18
 8003754:	230f      	movs	r3, #15
 8003756:	401a      	ands	r2, r3
 8003758:	4b3f      	ldr	r3, [pc, #252]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x148>)
 800375a:	5c9b      	ldrb	r3, [r3, r2]
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800375e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003760:	0d9a      	lsrs	r2, r3, #22
 8003762:	2303      	movs	r3, #3
 8003764:	4013      	ands	r3, r2
 8003766:	3301      	adds	r3, #1
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376a:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x138>)
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	025b      	lsls	r3, r3, #9
 8003772:	4013      	ands	r3, r2
 8003774:	d01a      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	4a35      	ldr	r2, [pc, #212]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x144>)
 8003780:	2300      	movs	r3, #0
 8003782:	69b8      	ldr	r0, [r7, #24]
 8003784:	69f9      	ldr	r1, [r7, #28]
 8003786:	f7fc fe55 	bl	8000434 <__aeabi_lmul>
 800378a:	0002      	movs	r2, r0
 800378c:	000b      	movs	r3, r1
 800378e:	0010      	movs	r0, r2
 8003790:	0019      	movs	r1, r3
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f7fc fe29 	bl	80003f4 <__aeabi_uldivmod>
 80037a2:	0002      	movs	r2, r0
 80037a4:	000b      	movs	r3, r1
 80037a6:	0013      	movs	r3, r2
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037aa:	e037      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80037ac:	4b26      	ldr	r3, [pc, #152]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x138>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2210      	movs	r2, #16
 80037b2:	4013      	ands	r3, r2
 80037b4:	d01a      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4a23      	ldr	r2, [pc, #140]	@ (800384c <HAL_RCC_GetSysClockFreq+0x13c>)
 80037c0:	2300      	movs	r3, #0
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	f7fc fe35 	bl	8000434 <__aeabi_lmul>
 80037ca:	0002      	movs	r2, r0
 80037cc:	000b      	movs	r3, r1
 80037ce:	0010      	movs	r0, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f7fc fe09 	bl	80003f4 <__aeabi_uldivmod>
 80037e2:	0002      	movs	r2, r0
 80037e4:	000b      	movs	r3, r1
 80037e6:	0013      	movs	r3, r2
 80037e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ea:	e017      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	0018      	movs	r0, r3
 80037f0:	2300      	movs	r3, #0
 80037f2:	0019      	movs	r1, r3
 80037f4:	4a16      	ldr	r2, [pc, #88]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x140>)
 80037f6:	2300      	movs	r3, #0
 80037f8:	f7fc fe1c 	bl	8000434 <__aeabi_lmul>
 80037fc:	0002      	movs	r2, r0
 80037fe:	000b      	movs	r3, r1
 8003800:	0010      	movs	r0, r2
 8003802:	0019      	movs	r1, r3
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	001c      	movs	r4, r3
 8003808:	2300      	movs	r3, #0
 800380a:	001d      	movs	r5, r3
 800380c:	0022      	movs	r2, r4
 800380e:	002b      	movs	r3, r5
 8003810:	f7fc fdf0 	bl	80003f4 <__aeabi_uldivmod>
 8003814:	0002      	movs	r2, r0
 8003816:	000b      	movs	r3, r1
 8003818:	0013      	movs	r3, r2
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003820:	e00d      	b.n	800383e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003822:	4b09      	ldr	r3, [pc, #36]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x138>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0b5b      	lsrs	r3, r3, #13
 8003828:	2207      	movs	r2, #7
 800382a:	4013      	ands	r3, r2
 800382c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	3301      	adds	r3, #1
 8003832:	2280      	movs	r2, #128	@ 0x80
 8003834:	0212      	lsls	r2, r2, #8
 8003836:	409a      	lsls	r2, r3
 8003838:	0013      	movs	r3, r2
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800383c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b00e      	add	sp, #56	@ 0x38
 8003846:	bdb0      	pop	{r4, r5, r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	003d0900 	.word	0x003d0900
 8003850:	00f42400 	.word	0x00f42400
 8003854:	007a1200 	.word	0x007a1200
 8003858:	08004324 	.word	0x08004324

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003864:	2317      	movs	r3, #23
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2220      	movs	r2, #32
 8003872:	4013      	ands	r3, r2
 8003874:	d106      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4013      	ands	r3, r2
 8003880:	d100      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003882:	e104      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003884:	4bb9      	ldr	r3, [pc, #740]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	055b      	lsls	r3, r3, #21
 800388c:	4013      	ands	r3, r2
 800388e:	d10a      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4bb6      	ldr	r3, [pc, #728]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003894:	4bb5      	ldr	r3, [pc, #724]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003896:	2180      	movs	r1, #128	@ 0x80
 8003898:	0549      	lsls	r1, r1, #21
 800389a:	430a      	orrs	r2, r1
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800389e:	2317      	movs	r3, #23
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	4bb2      	ldr	r3, [pc, #712]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4013      	ands	r3, r2
 80038b0:	d11a      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b2:	4baf      	ldr	r3, [pc, #700]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4bae      	ldr	r3, [pc, #696]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038b8:	2180      	movs	r1, #128	@ 0x80
 80038ba:	0049      	lsls	r1, r1, #1
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c0:	f7fd faba 	bl	8000e38 <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	e008      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ca:	f7fd fab5 	bl	8000e38 <HAL_GetTick>
 80038ce:	0002      	movs	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b64      	cmp	r3, #100	@ 0x64
 80038d6:	d901      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e143      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	4ba4      	ldr	r3, [pc, #656]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	2380      	movs	r3, #128	@ 0x80
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4013      	ands	r3, r2
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80038e8:	4ba0      	ldr	r3, [pc, #640]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	23c0      	movs	r3, #192	@ 0xc0
 80038ee:	039b      	lsls	r3, r3, #14
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	23c0      	movs	r3, #192	@ 0xc0
 80038fa:	039b      	lsls	r3, r3, #14
 80038fc:	4013      	ands	r3, r2
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d107      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	23c0      	movs	r3, #192	@ 0xc0
 800390a:	039b      	lsls	r3, r3, #14
 800390c:	4013      	ands	r3, r2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d013      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	23c0      	movs	r3, #192	@ 0xc0
 800391a:	029b      	lsls	r3, r3, #10
 800391c:	401a      	ands	r2, r3
 800391e:	23c0      	movs	r3, #192	@ 0xc0
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	429a      	cmp	r2, r3
 8003924:	d10a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003926:	4b91      	ldr	r3, [pc, #580]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	029b      	lsls	r3, r3, #10
 800392e:	401a      	ands	r2, r3
 8003930:	2380      	movs	r3, #128	@ 0x80
 8003932:	029b      	lsls	r3, r3, #10
 8003934:	429a      	cmp	r2, r3
 8003936:	d101      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e113      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800393c:	4b8b      	ldr	r3, [pc, #556]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800393e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003940:	23c0      	movs	r3, #192	@ 0xc0
 8003942:	029b      	lsls	r3, r3, #10
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d049      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	23c0      	movs	r3, #192	@ 0xc0
 8003954:	029b      	lsls	r3, r3, #10
 8003956:	4013      	ands	r3, r2
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	429a      	cmp	r2, r3
 800395c:	d004      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	4013      	ands	r3, r2
 8003966:	d10d      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	23c0      	movs	r3, #192	@ 0xc0
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	4013      	ands	r3, r2
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	429a      	cmp	r2, r3
 8003976:	d034      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	4013      	ands	r3, r2
 8003982:	d02e      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003984:	4b79      	ldr	r3, [pc, #484]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003988:	4a7a      	ldr	r2, [pc, #488]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800398a:	4013      	ands	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800398e:	4b77      	ldr	r3, [pc, #476]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003992:	4b76      	ldr	r3, [pc, #472]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003994:	2180      	movs	r1, #128	@ 0x80
 8003996:	0309      	lsls	r1, r1, #12
 8003998:	430a      	orrs	r2, r1
 800399a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800399c:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800399e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039a0:	4b72      	ldr	r3, [pc, #456]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039a2:	4975      	ldr	r1, [pc, #468]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80039a8:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4013      	ands	r3, r2
 80039b6:	d014      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd fa3e 	bl	8000e38 <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c0:	e009      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fd fa39 	bl	8000e38 <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	4a6b      	ldr	r2, [pc, #428]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0c6      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039d6:	4b65      	ldr	r3, [pc, #404]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4013      	ands	r3, r2
 80039e0:	d0ef      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	2380      	movs	r3, #128	@ 0x80
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	4013      	ands	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	23c0      	movs	r3, #192	@ 0xc0
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	401a      	ands	r2, r3
 80039f8:	23c0      	movs	r3, #192	@ 0xc0
 80039fa:	029b      	lsls	r3, r3, #10
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d10c      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003a00:	4b5a      	ldr	r3, [pc, #360]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5e      	ldr	r2, [pc, #376]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	23c0      	movs	r3, #192	@ 0xc0
 8003a10:	039b      	lsls	r3, r3, #14
 8003a12:	401a      	ands	r2, r3
 8003a14:	4b55      	ldr	r3, [pc, #340]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	4b54      	ldr	r3, [pc, #336]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	23c0      	movs	r3, #192	@ 0xc0
 8003a24:	029b      	lsls	r3, r3, #10
 8003a26:	401a      	ands	r2, r3
 8003a28:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2220      	movs	r2, #32
 8003a34:	4013      	ands	r3, r2
 8003a36:	d01f      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	23c0      	movs	r3, #192	@ 0xc0
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	401a      	ands	r2, r3
 8003a42:	23c0      	movs	r3, #192	@ 0xc0
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003a4a:	4b48      	ldr	r3, [pc, #288]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	23c0      	movs	r3, #192	@ 0xc0
 8003a5a:	039b      	lsls	r3, r3, #14
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	4b43      	ldr	r3, [pc, #268]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a66:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	23c0      	movs	r3, #192	@ 0xc0
 8003a6e:	029b      	lsls	r3, r3, #10
 8003a70:	401a      	ands	r2, r3
 8003a72:	4b3e      	ldr	r3, [pc, #248]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a74:	430a      	orrs	r2, r1
 8003a76:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a78:	2317      	movs	r3, #23
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4b3a      	ldr	r3, [pc, #232]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a86:	4b39      	ldr	r3, [pc, #228]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a88:	493e      	ldr	r1, [pc, #248]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	4013      	ands	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a98:	4b34      	ldr	r3, [pc, #208]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	4b31      	ldr	r3, [pc, #196]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aba:	220c      	movs	r2, #12
 8003abc:	4393      	bics	r3, r2
 8003abe:	0019      	movs	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	4b29      	ldr	r3, [pc, #164]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ad4:	4b25      	ldr	r3, [pc, #148]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	0019      	movs	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	4b22      	ldr	r3, [pc, #136]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2208      	movs	r2, #8
 8003aee:	4013      	ands	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003af2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af6:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b02:	430a      	orrs	r2, r1
 8003b04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	2380      	movs	r3, #128	@ 0x80
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b12:	4b16      	ldr	r3, [pc, #88]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	4a17      	ldr	r2, [pc, #92]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b30:	4b0e      	ldr	r3, [pc, #56]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b34:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b40:	430a      	orrs	r2, r1
 8003b42:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	4a10      	ldr	r2, [pc, #64]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b006      	add	sp, #24
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40007000 	.word	0x40007000
 8003b74:	fffcffff 	.word	0xfffcffff
 8003b78:	fff7ffff 	.word	0xfff7ffff
 8003b7c:	00001388 	.word	0x00001388
 8003b80:	ffcfffff 	.word	0xffcfffff
 8003b84:	efffffff 	.word	0xefffffff
 8003b88:	fffff3ff 	.word	0xfffff3ff
 8003b8c:	ffffcfff 	.word	0xffffcfff
 8003b90:	fbffffff 	.word	0xfbffffff
 8003b94:	fff3ffff 	.word	0xfff3ffff

08003b98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e032      	b.n	8003c10 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2239      	movs	r2, #57	@ 0x39
 8003bae:	5c9b      	ldrb	r3, [r3, r2]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2238      	movs	r2, #56	@ 0x38
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7fd f81f 	bl	8000c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2239      	movs	r2, #57	@ 0x39
 8003bca:	2102      	movs	r1, #2
 8003bcc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	0010      	movs	r0, r2
 8003bda:	f000 f975 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	223e      	movs	r2, #62	@ 0x3e
 8003be2:	2101      	movs	r1, #1
 8003be4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	223a      	movs	r2, #58	@ 0x3a
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	223b      	movs	r2, #59	@ 0x3b
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	5499      	strb	r1, [r3, r2]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	223c      	movs	r2, #60	@ 0x3c
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	5499      	strb	r1, [r3, r2]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	223d      	movs	r2, #61	@ 0x3d
 8003c02:	2101      	movs	r1, #1
 8003c04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2239      	movs	r2, #57	@ 0x39
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x22>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	223a      	movs	r2, #58	@ 0x3a
 8003c2c:	5c9b      	ldrb	r3, [r3, r2]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	4193      	sbcs	r3, r2
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e01f      	b.n	8003c7a <HAL_TIM_PWM_Start+0x62>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d108      	bne.n	8003c52 <HAL_TIM_PWM_Start+0x3a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	223b      	movs	r2, #59	@ 0x3b
 8003c44:	5c9b      	ldrb	r3, [r3, r2]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	4193      	sbcs	r3, r2
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e013      	b.n	8003c7a <HAL_TIM_PWM_Start+0x62>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d108      	bne.n	8003c6a <HAL_TIM_PWM_Start+0x52>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	223c      	movs	r2, #60	@ 0x3c
 8003c5c:	5c9b      	ldrb	r3, [r3, r2]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	1e5a      	subs	r2, r3, #1
 8003c64:	4193      	sbcs	r3, r2
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e007      	b.n	8003c7a <HAL_TIM_PWM_Start+0x62>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	223d      	movs	r2, #61	@ 0x3d
 8003c6e:	5c9b      	ldrb	r3, [r3, r2]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	1e5a      	subs	r2, r3, #1
 8003c76:	4193      	sbcs	r3, r2
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e052      	b.n	8003d28 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0x7a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223a      	movs	r2, #58	@ 0x3a
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	5499      	strb	r1, [r3, r2]
 8003c90:	e013      	b.n	8003cba <HAL_TIM_PWM_Start+0xa2>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x8a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	223b      	movs	r2, #59	@ 0x3b
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	5499      	strb	r1, [r3, r2]
 8003ca0:	e00b      	b.n	8003cba <HAL_TIM_PWM_Start+0xa2>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0x9a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	223c      	movs	r2, #60	@ 0x3c
 8003cac:	2102      	movs	r1, #2
 8003cae:	5499      	strb	r1, [r3, r2]
 8003cb0:	e003      	b.n	8003cba <HAL_TIM_PWM_Start+0xa2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	223d      	movs	r2, #61	@ 0x3d
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 fa62 	bl	800418c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2380      	movs	r3, #128	@ 0x80
 8003cce:	05db      	lsls	r3, r3, #23
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0xda>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <HAL_TIM_PWM_Start+0x118>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0xda>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <HAL_TIM_PWM_Start+0x11c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIM_PWM_Start+0xda>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <HAL_TIM_PWM_Start+0x120>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d111      	bne.n	8003d16 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d010      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	e007      	b.n	8003d26 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b004      	add	sp, #16
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40010800 	.word	0x40010800
 8003d38:	40011400 	.word	0x40011400

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2317      	movs	r3, #23
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2238      	movs	r2, #56	@ 0x38
 8003d54:	5c9b      	ldrb	r3, [r3, r2]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0ad      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2238      	movs	r2, #56	@ 0x38
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d100      	bne.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d6c:	e076      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x120>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d900      	bls.n	8003d76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003d74:	e095      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d04e      	beq.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0xde>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d900      	bls.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003d82:	e08e      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d021      	beq.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003d90:	e087      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	0011      	movs	r1, r2
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 f8f2 	bl	8003f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2108      	movs	r1, #8
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2104      	movs	r1, #4
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	619a      	str	r2, [r3, #24]
      break;
 8003dd2:	e06b      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	0011      	movs	r1, r2
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 f90d 	bl	8003ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2180      	movs	r1, #128	@ 0x80
 8003dee:	0109      	lsls	r1, r1, #4
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4931      	ldr	r1, [pc, #196]	@ (8003ec4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6999      	ldr	r1, [r3, #24]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	021a      	lsls	r2, r3, #8
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	619a      	str	r2, [r3, #24]
      break;
 8003e18:	e048      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f000 f92c 	bl	8004080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2108      	movs	r1, #8
 8003e34:	430a      	orrs	r2, r1
 8003e36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69da      	ldr	r2, [r3, #28]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2104      	movs	r1, #4
 8003e44:	438a      	bics	r2, r1
 8003e46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69d9      	ldr	r1, [r3, #28]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	61da      	str	r2, [r3, #28]
      break;
 8003e5a:	e027      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	0011      	movs	r1, r2
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 f94b 	bl	8004100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2180      	movs	r1, #128	@ 0x80
 8003e76:	0109      	lsls	r1, r1, #4
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	490f      	ldr	r1, [pc, #60]	@ (8003ec4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69d9      	ldr	r1, [r3, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	61da      	str	r2, [r3, #28]
      break;
 8003ea0:	e004      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003ea2:	2317      	movs	r3, #23
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
      break;
 8003eaa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2238      	movs	r2, #56	@ 0x38
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]

  return status;
 8003eb4:	2317      	movs	r3, #23
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	781b      	ldrb	r3, [r3, #0]
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	fffffbff 	.word	0xfffffbff

08003ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	05db      	lsls	r3, r3, #23
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x32>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	@ (8003f74 <TIM_Base_SetConfig+0xac>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x32>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a22      	ldr	r2, [pc, #136]	@ (8003f78 <TIM_Base_SetConfig+0xb0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x32>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <TIM_Base_SetConfig+0xb4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2270      	movs	r2, #112	@ 0x70
 8003efe:	4393      	bics	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	2380      	movs	r3, #128	@ 0x80
 8003f10:	05db      	lsls	r3, r3, #23
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d00b      	beq.n	8003f2e <TIM_Base_SetConfig+0x66>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <TIM_Base_SetConfig+0xac>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0x66>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <TIM_Base_SetConfig+0xb0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0x66>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a14      	ldr	r2, [pc, #80]	@ (8003f7c <TIM_Base_SetConfig+0xb4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a13      	ldr	r2, [pc, #76]	@ (8003f80 <TIM_Base_SetConfig+0xb8>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2280      	movs	r2, #128	@ 0x80
 8003f44:	4393      	bics	r3, r2
 8003f46:	001a      	movs	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	615a      	str	r2, [r3, #20]
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40010800 	.word	0x40010800
 8003f7c:	40011400 	.word	0x40011400
 8003f80:	fffffcff 	.word	0xfffffcff

08003f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	2201      	movs	r2, #1
 8003f94:	4393      	bics	r3, r2
 8003f96:	001a      	movs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2270      	movs	r2, #112	@ 0x70
 8003fb2:	4393      	bics	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4393      	bics	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4393      	bics	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b006      	add	sp, #24
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	2210      	movs	r2, #16
 800400c:	4393      	bics	r3, r2
 800400e:	001a      	movs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <TIM_OC2_SetConfig+0x7c>)
 800402a:	4013      	ands	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a12      	ldr	r2, [pc, #72]	@ (800407c <TIM_OC2_SetConfig+0x80>)
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2220      	movs	r2, #32
 8004046:	4393      	bics	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b006      	add	sp, #24
 8004076:	bd80      	pop	{r7, pc}
 8004078:	ffff8fff 	.word	0xffff8fff
 800407c:	fffffcff 	.word	0xfffffcff

08004080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a1a      	ldr	r2, [pc, #104]	@ (80040f8 <TIM_OC3_SetConfig+0x78>)
 8004090:	401a      	ands	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2270      	movs	r2, #112	@ 0x70
 80040ac:	4393      	bics	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2203      	movs	r2, #3
 80040b4:	4393      	bics	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4a0d      	ldr	r2, [pc, #52]	@ (80040fc <TIM_OC3_SetConfig+0x7c>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b006      	add	sp, #24
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	fffffeff 	.word	0xfffffeff
 80040fc:	fffffdff 	.word	0xfffffdff

08004100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <TIM_OC4_SetConfig+0x7c>)
 8004110:	401a      	ands	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <TIM_OC4_SetConfig+0x80>)
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a14      	ldr	r2, [pc, #80]	@ (8004184 <TIM_OC4_SetConfig+0x84>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4a10      	ldr	r2, [pc, #64]	@ (8004188 <TIM_OC4_SetConfig+0x88>)
 8004148:	4013      	ands	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	031b      	lsls	r3, r3, #12
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b006      	add	sp, #24
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	ffffefff 	.word	0xffffefff
 8004180:	ffff8fff 	.word	0xffff8fff
 8004184:	fffffcff 	.word	0xfffffcff
 8004188:	ffffdfff 	.word	0xffffdfff

0800418c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	221f      	movs	r2, #31
 800419c:	4013      	ands	r3, r2
 800419e:	2201      	movs	r2, #1
 80041a0:	409a      	lsls	r2, r3
 80041a2:	0013      	movs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	43d2      	mvns	r2, r2
 80041ae:	401a      	ands	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	211f      	movs	r1, #31
 80041bc:	400b      	ands	r3, r1
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4099      	lsls	r1, r3
 80041c2:	000b      	movs	r3, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b006      	add	sp, #24
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2238      	movs	r2, #56	@ 0x38
 80041e2:	5c9b      	ldrb	r3, [r3, r2]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e047      	b.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2238      	movs	r2, #56	@ 0x38
 80041f0:	2101      	movs	r1, #1
 80041f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2239      	movs	r2, #57	@ 0x39
 80041f8:	2102      	movs	r1, #2
 80041fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2270      	movs	r2, #112	@ 0x70
 8004210:	4393      	bics	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	2380      	movs	r3, #128	@ 0x80
 800422c:	05db      	lsls	r3, r3, #23
 800422e:	429a      	cmp	r2, r3
 8004230:	d00e      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a10      	ldr	r2, [pc, #64]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10c      	bne.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2280      	movs	r2, #128	@ 0x80
 8004254:	4393      	bics	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	4313      	orrs	r3, r2
 8004260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2239      	movs	r2, #57	@ 0x39
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2238      	movs	r2, #56	@ 0x38
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b004      	add	sp, #16
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40000400 	.word	0x40000400
 8004288:	40010800 	.word	0x40010800
 800428c:	40011400 	.word	0x40011400

08004290 <memset>:
 8004290:	0003      	movs	r3, r0
 8004292:	1882      	adds	r2, r0, r2
 8004294:	4293      	cmp	r3, r2
 8004296:	d100      	bne.n	800429a <memset+0xa>
 8004298:	4770      	bx	lr
 800429a:	7019      	strb	r1, [r3, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	e7f9      	b.n	8004294 <memset+0x4>

080042a0 <__libc_init_array>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	2600      	movs	r6, #0
 80042a4:	4c0c      	ldr	r4, [pc, #48]	@ (80042d8 <__libc_init_array+0x38>)
 80042a6:	4d0d      	ldr	r5, [pc, #52]	@ (80042dc <__libc_init_array+0x3c>)
 80042a8:	1b64      	subs	r4, r4, r5
 80042aa:	10a4      	asrs	r4, r4, #2
 80042ac:	42a6      	cmp	r6, r4
 80042ae:	d109      	bne.n	80042c4 <__libc_init_array+0x24>
 80042b0:	2600      	movs	r6, #0
 80042b2:	f000 f819 	bl	80042e8 <_init>
 80042b6:	4c0a      	ldr	r4, [pc, #40]	@ (80042e0 <__libc_init_array+0x40>)
 80042b8:	4d0a      	ldr	r5, [pc, #40]	@ (80042e4 <__libc_init_array+0x44>)
 80042ba:	1b64      	subs	r4, r4, r5
 80042bc:	10a4      	asrs	r4, r4, #2
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d105      	bne.n	80042ce <__libc_init_array+0x2e>
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	00b3      	lsls	r3, r6, #2
 80042c6:	58eb      	ldr	r3, [r5, r3]
 80042c8:	4798      	blx	r3
 80042ca:	3601      	adds	r6, #1
 80042cc:	e7ee      	b.n	80042ac <__libc_init_array+0xc>
 80042ce:	00b3      	lsls	r3, r6, #2
 80042d0:	58eb      	ldr	r3, [r5, r3]
 80042d2:	4798      	blx	r3
 80042d4:	3601      	adds	r6, #1
 80042d6:	e7f2      	b.n	80042be <__libc_init_array+0x1e>
 80042d8:	08004338 	.word	0x08004338
 80042dc:	08004338 	.word	0x08004338
 80042e0:	0800433c 	.word	0x0800433c
 80042e4:	08004338 	.word	0x08004338

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
